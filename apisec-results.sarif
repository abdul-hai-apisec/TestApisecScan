{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"results":[{"locations":[{"physicalLocation":{"region":{"startLine":1},"artifactLocation":{"uri":"none"}}}],"ruleId":"Unsecured","message":{"text":"Unsecured Vulnerability on GET:/api/v1/primary-transaction"}},{"locations":[{"physicalLocation":{"region":{"startLine":1},"artifactLocation":{"uri":"none"}}}],"ruleId":"Unsecured","message":{"text":"Unsecured Vulnerability on DELETE:/api/v1/primary-transaction/{id}"}},{"locations":[{"physicalLocation":{"region":{"startLine":1},"artifactLocation":{"uri":"none"}}}],"ruleId":"Unsecured","message":{"text":"Unsecured Vulnerability on PUT:/api/v1/primary-transaction"}},{"locations":[{"physicalLocation":{"region":{"startLine":1},"artifactLocation":{"uri":"none"}}}],"ruleId":"Unsecured","message":{"text":"Unsecured Vulnerability on GET:/api/v1/primary-transaction/{id}"}}],"tool":{"driver":{"name":"APISec","rules":[{"help":{"text":"<ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul>"},"id":"ABAC_Level5","fullDescription":{"text":"<b><font color=\"#ef5350\">Name: <\/font><\/b> Attribute Based Access Control 5 (ABAC 5) <b><font color=\"#ef5350\"><sup>( 1 )<\/sup><\/font><\/b><br> <br> <b><font color=\"#ef5350\">Overview: <\/font><\/b> Access Control (or Authorization) is the process of granting or denying specific requests from a user, program, or process. Access control also involves the act of granting and revoking those privileges. Attribute Based Access Control (ABAC) will grant or deny user requests based on arbitrary attributes of the user and arbitrary attributes of the object, and environment conditions that may be globally recognized and more relevant to the policies at hand. <br> <br>'Attribute-based-access-control 5' identifies all types of top-level/non-dependent resource/data/record vulnerabilities. e.g. Accounts of type Savings, Checking, & Investment etc. making sure there are no vulnerabilities across all of these types of resources and not just one. ABAC scanning identifies data/resource leak/attack vulnerabilities. Looks for private user/account data being legally read, written, updated, deleted or operated by valid accounts or privileged accounts within the same tenant.<br> <br>This scanner requires a private-account/user to create private data/resources e.g. UserA. And it also requires other users who should have access to UserA's data like UserA, & UserB, based on your App multi-tenancy model. e.g. UserA can be a user from tenant/org-a and UserB can be a user in the same tenant-a but with admin/write/same/higher privileges.<br/> <br/>APIs tend to expose endpoints that handle object identifiers, creating a wide attack surface Level Access Control issue. Object-level authorization checks should be considered in every function that accesses a data source using input from the user.<br> <br> <b><font color=\"#ef5350\">Severity: <\/font><\/b> OWASP 2019 API Top 10 ranks ABAC vulnerabilities at Top 1 position and is named Broken Object Level Authorization. <b><font color=\"#ef5350\"><sup>( 2 )<\/sup><\/font><\/b> <br> <br> <b><font color=\"#ef5350\">Vulnerability Impact: <\/font><\/b> With flawed or broken ABAC security control policy in place, The following are some of the consequences. <br> <br><ul> <li>Unauthorized access can result in data disclosure to unauthorized parties, data loss, or data manipulation.<\/li> <li>Unauthorized access to objects can also lead to full account takeover.<\/li> <\/ul> <b><font color=\"#ef5350\">Exploitation: <\/font><\/b> Attackers can exploit API endpoints that are vulnerable to broken object level authorization by manipulating the ID of an object that is sent within the request. This may lead to unauthorized access to sensitive data. This issue is  extremely common in API-based applications because the server component usually does not fully track the client\u2019s state, and instead, relies more on parameters like object IDs, that are sent from the client to decide which objects to access. <br> <br> <b><font color=\"#ef5350\">Remediation: <\/font><\/b> The following techniques may be checked for ensuring RBAC is in place <b><font color=\"#ef5350\"><sup>( 2 ) ( 3 ) ( 4 )<\/sup><\/font><\/b>. <br> <br><ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul> <b><font color=\"#ef5350\">References: <\/font><\/b><br> <ol> <li>Enforce Access Controls - https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html<\/li> <li>OWASP 2019 API Top 10 - https://github.com/OWASP/API-Security/raw/master/2019/en/dist/owasp-api-security-top-10.pdf<\/li> <li>OWASP Access Control Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html<\/li> <li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"8.1","problem.severity":"error","tags":["FX Top 10 - API Vulnerability","Data_Access_Control"]}},{"help":{"text":"<ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul>"},"id":"ABAC_Level6","fullDescription":{"text":"<b><font color=\"#ef5350\">Name: <\/font><\/b> Attribute Based Access Control 6 (ABAC 6) <b><font color=\"#ef5350\"><sup>( 1 )<\/sup><\/font><\/b><br> <br> <b><font color=\"#ef5350\">Overview: <\/font><\/b> Access Control (or Authorization) is the process of granting or denying specific requests from a user, program, or process. Access control also involves the act of granting and revoking those privileges. Attribute Based Access Control (ABAC) will grant or deny user requests based on arbitrary attributes of the user and arbitrary attributes of the object, and environment conditions that may be globally recognized and more relevant to the policies at hand. <br> <br>'Attribute-based-access-control 6' identifies dependent and nested resource/data/record vulnerabilities. e.g. vulnerabilities in tasks which is nested within a project and the access-controls may only be applied at the project level. Looks for private user/account data being legally read, written, updated, deleted or operated by valid accounts or privileged accounts within the same tenant. <br> <br>This scanner requires a private-account/user to create private data/resources e.g. UserA. And it also requires other users who should have access to UserA's data like UserA, & UserB, based on your App multi-tenancy model. e.g. UserA can be a user from tenant/org-a and UserB can be a user in the same tenant-a but with admin/write/same/higher privileges.<br> <br>APIs tend to expose endpoints that handle object identifiers, creating a wide attack surface Level Access Control issue. Object-level authorization checks should be considered in every function that accesses a data source using input from the user.<br> <br> <b><font color=\"#ef5350\">Severity: <\/font><\/b> OWASP 2019 API Top 10 ranks ABAC vulnerabilities at Top 1 position and is named Broken Object Level Authorization. <b><font color=\"#ef5350\"><sup>( 2 )<\/sup><\/font><\/b> <br> <br> <b><font color=\"#ef5350\">Vulnerability Impact: <\/font><\/b> With flawed or broken ABAC security control policy in place, The following are some of the consequences. <br> <br><ul> <li>Unauthorized access can result in data disclosure to unauthorized parties, data loss, or data manipulation.<\/li> <li>Unauthorized access to objects can also lead to full account takeover.<\/li> <\/ul> <b><font color=\"#ef5350\">Exploitation: <\/font><\/b> Attackers can exploit API endpoints that are vulnerable to broken object level authorization by manipulating the ID of an object that is sent within the request. This may lead to unauthorized access to sensitive data. This issue is  extremely common in API-based applications because the server component usually does not fully track the client\u2019s state, and instead, relies more on parameters like object IDs, that are sent from the client to decide which objects to access. <br> <br> <b><font color=\"#ef5350\">Remediation: <\/font><\/b> The following techniques may be checked for ensuring RBAC is in place <b><font color=\"#ef5350\"><sup>( 2 ) ( 3 ) ( 4 )<\/sup><\/font><\/b>. <br> <br><ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul> <b><font color=\"#ef5350\">References: <\/font><\/b><br> <ol> <li>Enforce Access Controls - https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html<\/li> <li>OWASP 2019 API Top 10 - https://github.com/OWASP/API-Security/raw/master/2019/en/dist/owasp-api-security-top-10.pdf<\/li> <li>OWASP Access Control Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html<\/li> <li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"8.1","problem.severity":"error","tags":["FX Top 10 - API Vulnerability","Data_Access_Control"]}},{"help":{"text":"<ul>\n<li>Make it a routine to actually look at the logs for these errors and automate the process if possible.<\/li>\n<li>There should be a system in place that alerts you if a specific warning has been triggered or if a certain warning threshold has been reached, so that proper action can be taken.<\/li>\n<\/ul>"},"id":"Resource_Not_Found_Logging","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong>Resource Not Found Logging<strong class=\"text-danger\"><sup>( 1 ) ( 2 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Overview: <\/strong>Most APIs calls use standard HTTP methods to fetch or send data. But if at any point, a wrong data input is used to fetch, it can result in Page Not found 404 or Resource missing error. <br>\n<br>\nIf data used as input to fetch data is sent by mistake, Resource Missing Error is genuine and the Consumer of the API can correct the data and request again. But What if wrong data is sent intentionally?<br>\n<br>\nAttackers can craft and manipulate input data and the response of the APIs can be analyzed to understand and determine how the system behaves and may launch a systematic attack on the system to extract sensitive data. Attackers have plenty of time and they can continously request an API and probe the responses to accomplish their siniter persuits. <br>\n<br>\nWhile there can be defences in place like Rate Limit to suspend the incoming traffic temporarily. But this can be easily circumvented by making the number of requests to be within the limit and probing can be prolonged over a period of time with perseverance. <br>\n<br> \nThis categogy is to ensure that our clients take necessary steps to proactively log and monitor any such suspicious activity and act upon it. <br>\n<br>\n<strong class=\"text-danger\">Severity: <\/strong>As this is part of Logging and Monitoring and hence will be classified under Insufficent Logging and Monitoring. <br>\n<br>InsufficientLogging and Monitoring is rated at 10th position in both OWASP 2019 API Security Top 10 and also OWASP 2017 Security Top 10 <strong class=\"text-danger\"><sup>( 3 ) ( 4 )<\/sup><\/strong>.<br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact: <\/strong>Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems to tamper with, extract, or destroy data. <br>\n<br>Most breach studies demonstrate the time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.<br>\n<br>\n<strong class=\"text-danger\">Exploitation: <\/strong>When a security breach is not discovered in time, the attackers have time to escalate the attack further into the system. It also means they can use the stolen data for malicious purposes for a longer time.<br>\n<br>\n<strong class=\"text-danger\">Remediation: <\/strong>The following best practices can be followed. <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong> <br>\n<br>\n<ul>\n<li>Make it a routine to actually look at the logs for these errors and automate the process if possible.<\/li>\n<li>There should be a system in place that alerts you if a specific warning has been triggered or if a certain warning threshold has been reached, so that proper action can be taken.<\/li>\n<\/ul>\n<strong class=\"text-danger\">References: <\/strong><br>\n<ol>\n<li>Brute Force Attack - https://www.owasp.org/index.php/Testing_for_Brute_Force_(OWASP-AT-004) <\/li>\n<li>Improper Error Handling - https://www.owasp.org/index.php/Improper_Error_Handling<\/li>\n<li>Insufficient Logging & Monitoring https://www.owasp.org/index.php/Top_10-2017_A10-Insufficient_Logging%26Monitoring<\/li>\n<li>OWASP API Security Project - https://www.owasp.org/index.php/OWASP_API_Security_Project<\/li>\n<li>Logging Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.4","problem.severity":"error","tags":[]}},{"help":{"text":"<ul>\n<li>Avoid relying on clients to filter the data<\/li>\n<li>Define specific schemas for each API responses<\/li>\n<li>Ensure data is returned to match what consumers really need<\/li>\n<li>Enforce response checks to prevent accidental leaks of data or exceptions<\/li>\n<li>Identify Sensitive and Personal Identifiable Information and be particular about exposing such info only on a need to know basis<\/li> \n<\/ul>\n"},"id":"Sensitive_Data_Exposure","fullDescription":{"text":"<strong class=\"text-danger\"> Name: <\/strong>Sensitive Data Exposure <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Overview: <\/strong> In an effort to make more generic APIs, developers inadvertently tend to expose more data than required by clients. The logic to show the required data is implemented at the client level. Some of the data elements exposed, sensitive to business and organizations, if lands in the hands of attackers can cause serious damage to reputation of the organization. <br>\n<br>\nData Masking validates sensitive exposure like emails, passwords, names etc.<br/><br/>Looking forward to generic implementations, developers tend to expose all object properties without considering their individual sensitivity, relying on clients to perform the data filtering before displaying it to the user. <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong>\n<br>\n<br> \n<strong class=\"text-danger\">Severity: <\/strong> OWASP 2019 API Top 10 ranks Excessive Data Exposure at 3rd position. And OWASP 2017 Top 10 ranks Sensitive Data Exposure at the 3rd position. <strong class=\"text-danger\"><sup>( 1 ) ( 2 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact: <\/strong> With excessive data exposed, The following are some of the consequences.<br>\n<br><ul>\n<li>Unnecessary Data Exposure and Data theft.<\/li>\n<li>Exposure of Clients data and Personal Identifiable Information. <\/li>\n<li>Can be financially devastating to the organization.<\/li>\n<li>Non-compliance to data regulations like EU GDPR or local privacy laws.<\/li>\n<\/ul>\n<strong class=\"text-danger\">Exploitation:  <\/strong> Exploitation requires the attacker to send legitimate API calls to the API endpoint that they have access to and peruse the data returned to get hold of sensitive data. <br>\n<br>\n<strong class=\"text-danger\">Remediation: <\/strong> The following techniques may be checked for ensuring Excessive Data is not exposed.<br>\n<br><ul>\n<li>Avoid relying on clients to filter the data<\/li>\n<li>Define specific schemas for each API responses<\/li>\n<li>Ensure data is returned to match what consumers really need<\/li>\n<li>Enforce response checks to prevent accidental leaks of data or exceptions<\/li>\n<li>Identify Sensitive and Personal Identifiable Information and be particular about exposing such info only on a need to know basis<\/li> \n<\/ul>\n<strong class=\"text-danger\">References: <\/strong><br>\n<ol>\n<li>API3:2019 Excessive Data Exposure -\thttps://owasp.org/www-project-api-security/<\/li>\n<li>A3-Sensitive Data Exposure - https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure <\/li>\n<li>CWE-200: Exposure of Sensitive Information to an Unauthorized Actor - https://cwe.mitre.org/data/definitions/200.html<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":["OWASP A1","OWASP A3","[PCI DSS 3.0] 6.5.7","[PCI DSS 3.2] 6.5.1","OWASP - OTG-INPVAL-001","OWASP - OTG-INPVAL-002","OWASP OTG-INPVAL-013","FX Top 10 - API Vulnerability","INPUT VALIDATION","NON-INTRUSIVE"]}},{"help":{"text":"<ul>\n<li>Avoid relying on clients to filter the data<\/li>\n<li>Define specific schemas for each API responses<\/li>\n<li>Ensure data is returned to match what consumers really need<\/li>\n<li>Enforce response checks to prevent accidental leaks of data or exceptions<\/li>\n<li>Identify Sensitive and Personal Identifiable Information and be particular about exposing such info only on a need to know basis<\/li> \n<\/ul>"},"id":"Sensitive_Data_Exposure_L2","fullDescription":{"text":"<strong class=\"text-danger\"> Name: <\/strong>Sensitive Data Exposure L2 <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Overview: <\/strong> In an effort to make more generic APIs, developers inadvertently tend to expose more data than required by clients. The logic to show the required data is implemented at the client level. Some of the data elements exposed, sensitive to business and organizations, if lands in the hands of attackers can cause serious damage to reputation of the organization. \n<br>\n<br>\nData Masking validates sensitive exposure like emails, passwords, names etc.<br/><br/>Looking forward to generic implementations, developers tend to expose all object properties without considering their individual sensitivity, relying on clients to perform the data filtering before displaying it to the user. <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong>\n<br>\n<br> \n<strong class=\"text-danger\">Severity: <\/strong> OWASP 2019 API Top 10 ranks Excessive Data Exposure at 3rd position. And OWASP 2017 Top 10 ranks Sensitive Data Exposure at the 3rd position. <strong class=\"text-danger\"><sup>( 1 ) ( 2 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact: <\/strong> With excessive data exposed, The following are some of the consequences.<br>\n<br><ul>\n<li>Unnecessary Data Exposure and Data theft.<\/li>\n<li>Exposure of Clients data and Personal Identifiable Information. <\/li>\n<li>Can be financially devastating to the organization.<\/li>\n<li>Non-compliance to data regulations like EU GDPR or local privacy laws.<\/li>\n<\/ul>\n<strong class=\"text-danger\">Exploitation:  <\/strong> Exploitation requires the attacker to send legitimate API calls to the API endpoint that they have access to and peruse the data returned to get hold of sensitive data. <br>\n<br>\n<strong class=\"text-danger\">Remediation: <\/strong> The following techniques may be checked for ensuring Excessive Data is not exposed.<br>\n<br>\n<ul>\n<li>Avoid relying on clients to filter the data<\/li>\n<li>Define specific schemas for each API responses<\/li>\n<li>Ensure data is returned to match what consumers really need<\/li>\n<li>Enforce response checks to prevent accidental leaks of data or exceptions<\/li>\n<li>Identify Sensitive and Personal Identifiable Information and be particular about exposing such info only on a need to know basis<\/li> \n<\/ul>\n<strong class=\"text-danger\">References: <\/strong><br>\n<ol>\n<li>API3:2019 Excessive Data Exposure -\thttps://owasp.org/www-project-api-security/<\/li>\n<li>A3-Sensitive Data Exposure - https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure <\/li>\n<li>CWE-200: Exposure of Sensitive Information to an Unauthorized Actor - https://cwe.mitre.org/data/definitions/200.html<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":[]}},{"help":{"text":"<ul> <li>Use of Prepared Statements \t\t\t<\/li> <li>Use of Stored Procedures\t\t\t<\/li> <li>White list input validation\t\t\t<\/li> <li>Escaping all user supplied input \t<\/li> <li>Enforcing Least Privilege \t\t\t<\/li> <\/ul>"},"id":"SQL_Injection_Filter","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Stored SQL Injection <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Overview:<\/strong> SQL Injection is an Attack. It is executed by insertion or \u201cInjection\u201d of either partial or complete SQL query via query parameters, request body parameters, path parameters and passed to the application server/database.<br> <br> <strong class=\"text-danger\">Severity:<\/strong> SQL Injection is classified under the category of \u201cInjection Attacks\u201d by OWASP. \u201cInjection Attacks\u201d is consistently rated at Top 1 Category of Attack by OWASP in years 2010, 2013 and 2017 <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong>. SQL Injection is rated top 1 in the CWE / SANS Top 25 <strong class=\"text-danger\"><sup>( 3 ) ( 4 )<\/sup><\/strong>. <br> <br> <strong class=\"text-danger\">Vulnerability Impact:<\/strong> A Successful SQL Injection attack <br> <br><ul> <li>Can read sensitive data from the database<\/li> <li>Can modify the database data thru Insert / Update / Delete statements<\/li> <li>Can execute administrative operations on the database<\/li> <li>Can recover the content of the given file existing on the database<\/li> <li>Can write files into the file system<\/li> <li>Can issue commands to the operating System<\/li> <\/ul> <strong class=\"text-danger\">Exploitation:<\/strong> A successful SQL Injection attack is possible when the attacker crafts a syntactically Correct SQL Query. If an error is thrown back by the API by incorrect query, it will become much easier for the attacker to reconstruct the logic of the original query. If error is hidden, the attacker may have to reverse engineer for an exploitation. It might happen because of the following<br> <br><ul> <li>User supplied data is NOT validated, filtered or sanitized by the application<\/li> <li>Dynamic queries or non-parameterized calls without context-aware escaping<\/li> <\/ul> <strong class=\"text-danger\"> Remediation: <\/strong> A successful SQL Injection attack may possibly be avoided by Secure Coding Practices as outlined by OWASP SQL injection Prevention Cheat Sheet <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>. The following are some of the techniques for remediating SQL Injection attacks. <br> <br><ul> <li>Use of Prepared Statements \t\t\t<\/li> <li>Use of Stored Procedures\t\t\t<\/li> <li>White list input validation\t\t\t<\/li> <li>Escaping all user supplied input \t<\/li> <li>Enforcing Least Privilege \t\t\t<\/li> <\/ul> <strong class=\"text-danger\"> References:<\/strong><br> <ol> <li>SQL Injection: https://www.owasp.org/index.php/SQL_Injection<\/li> <li>OWASP Top 10 \u2013 2017 \u2013 A1 Injection - https://www.owasp.org/index.php/Top_10-2017_A1-Injection<\/li> <li>CWE \u2013 SANS \u2013 TOP 25 - http://cwe.mitre.org/top25/<\/li> <li>Common Weakness Enumeration \u2013 SQL Injection - http://cwe.mitre.org/data/definitions/89.html<\/li> <li>OWASP SQL Injection Prevention Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":["OWASP A1","[PCI DSS 3.0] 6.5.1","OWASP - OTG-INPVAL-005","FX Top 10 - API Vulnerability","Intrusive"]}},{"help":{"text":"More Details"},"id":"Custom","fullDescription":{"text":"Customize HTTP Headers for endpoints"},"properties":{"problem.severity":"recommendation","tags":[]}},{"help":{"text":"<ul> <li>Session Management and Authentication<\/li> <li>API Keys<\/li> <li>OpenID Connect, OAuth2, and SAML<\/li> <li>Access Controls <\/li> <li>Rate Limits <\/li> <li>Input Validation and HTTP Return Codes<\/li> <\/ul>"},"id":"Unsecured","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Unsecured Endpoints <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Overview: <\/strong> RESTful API is an application program interface (API) that uses HTTP requests to GET, PUT, POST, and DELETE data. A RESTful API \u2014 also referred to as a RESTful web service \u2014 is based on representational state transfer (REST) technology, an architectural style and approach to communications often used in web services development. These exposed endpoints should not be open to all and should be protected. A top priority for the organizations is to have Secured Endpoints. <br> <br> The 'Unsecured Endpoint' scanning identifies vulnerabilities resulting from the non-protected endpoints. These endpoints requires no authentication scheme and are open for both authenticated and non-authenticated requests.<br/><br/>Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently. Compromising system's ability to identify the client/user, compromises API security overall.<br/><br/>Security misconfiguration is commonly a result of insecure default configurations, incomplete or ad-hoc configurations, open cloud storage, misconfigured HTTP headers, unnecessary HTTP methods, permissive Cross-Origin resource sharing (CORS), and verbose error messages containing sensitive information. <br> <br> <strong class=\"text-danger\">Severity: <\/strong> The difficulty of achieving API security has increased exponentially and unprotected APIs are one of the top web application security risks organizations face. OWASP included \u201cUnprotected APIs\u201d in its proposal for 2017 top 10 list. <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Vulnerability Impact: <\/strong> Every exposed API end-point will have some action to be performed thru appropriate HTTP method and not all methods are valid for every single end-point. Left unchecked and opened for access to all, the following are some of the consequences <strong class=\"text-danger\"><sup>( 3 )<\/sup><\/strong>. <br> <br> <ul> <li>Unnecessary Data Exposure and Data theft and corruption<\/li> <li>Denial of Service Attacks \u2013 can render your RESTful API into non-functional state<\/li> <li>Malicious Code Injection \u2013 including SQL Injections<\/li> <li>Anti-Farming \u2013 RESTful APIs should be prevented from excessive farming.<\/li> <\/ul> <br> <strong class=\"text-danger\">Exploitation: <\/strong> Almost all kinds of authentication, injection, encryption, configuration, access control, and other issues can possible in the RESTful APIs as like the traditional application. Since APIs includes complex data structures and protocols, the security testing may become cumbersome for an attacker. But it is quite possible to analyze APIs and discover vulnerabilities and exploit <strong class=\"text-danger\"><sup>( 4 )<\/sup><\/strong>. <br> <br> <strong class=\"text-danger\">Remediation: <\/strong> The following techniques may be utilized for having Secured Endpoints <strong class=\"text-danger\"><sup>( 3 ) ( 5 ) ( 6 )<\/sup><\/strong>.<br> <br><ul> <li>Session Management and Authentication<\/li> <li>API Keys<\/li> <li>OpenID Connect, OAuth2, and SAML<\/li> <li>Access Controls <\/li> <li>Rate Limits <\/li> <li>Input Validation and HTTP Return Codes<\/li> <\/ul> <strong class=\"text-danger\">References: <\/strong> <br> <ol> <li>Representational State Transfer (REST) - https://en.wikipedia.org/wiki/Representational_state_transfer<\/li> <li>OWASP 2017 Top 10 Proposal \u2013Unprotected APIs - https://www.owasp.org/index.php?title=Top_10_2017-A10-Underprotected_APIs&oldid=228947<\/li> <li>RESTful API Security - https://dzone.com/articles/restful-api-security<\/li> <li>API Exploits - https://www.hack2secure.com/blogs/what-are-api-exploits<\/li> <li>REST API Security Guidelines - https://dzone.com/articles/top-5-rest-api-security-guidelines<\/li> <li>OWASP REST Security Cheat Sheet - https://www.owasp.org/index.php/REST_Security_Cheat_Sheet<\/li> <\/ol> <br>"},"properties":{"security-severity":"9.1","problem.severity":"error","tags":["OWASP - OTG-AUTHN-002","FX Top 10 - API Vulnerability","Non-Intrusive"]}},{"help":{"text":"<ul> <li>Deny all access by default, requiring explicit grants to specific roles for access to every function.<\/li> <li>Review your API endpoints against function level authorization flaws, while keeping in mind the business logic of the application and groups hierarchy.<\/li> <li>Make sure that all of your administrative controllers inherit from an administrative abstract controller that implements authorization checks based on the user\u2019s group/role.<\/li> <li>Make sure that administrative functions inside a regular controller implements authorization checks based on the user\u2019s group and role. <\/li> <\/ul>"},"id":"RBAC","fullDescription":{"text":"<b > <font color=\"#ef5350\"> Name: <\/font><\/font><\/b>Role Based Access Control (RBAC) <b><font color=\"#ef5350\"> \n<sup>( 1 )<\/sup><\/font><\/b><br> <br> <b><font color=\"#ef5350\"> Overview:  <\/font><\/b> Access Control \n(or Authorization) is the process of granting or denying specific requests from a user,\n program, or process. Access control also involves the act of granting and revoking those \n privileges. Role Based Access Control (RBAC) is a model for controlling access to resources\n  where permitted actions on resources are identified with roles rather than with individual \n  subject identities. In API world, With RBAC, users are granted privilege to only execute and\n   invoke APIs that are needed to perform their tasks. Without access control users would be\n    allowed to invoke any APIs and perform any functions on the system.<br> <br> \n    <b><font color=\"#ef5350\"> Severity: <\/font><\/b> OWASP 2019 API Top 10 ranks RBAC vulnerabilities at\n     5th position. And OWASP 2017 Top 10 ranks Broken Access control at the 5th position. \n     <b><font color=\"#ef5350\"> <sup>( 2 ) ( 3 )<\/sup><\/font><\/b><br> <br>\n      <b><font color=\"#ef5350\"> Vulnerability Impact: <\/font><\/b> With flawed or broken RBAC security \n      control policy in place, The following are some of the consequences.<br> <br><ul>\n       <li>Attackers can take advantage of privilege escalation and perform actions not \n       intended.<\/li> <li>Exposure of Sensitive data to persons not authorized. <\/li> <\/ul> \n       <b><font color=\"#ef5350\"> Exploitation:  <\/font><\/b> Exploitation requires the attacker to send\n        legitimate API calls to the API endpoint that they should not have access to. These \n        endpoints might be exposed to anonymous users or regular, non-privileged users. It\u2019s easier \n        to discover these flaws in APIs since APIs are more structured, and the way to access certain \n        functions is more predictable (e.g., replacing the HTTP method from GET to PUT, or changing \n        the \u201cusers\u201d string in the URL to \"admins\", or changing the value of a parameter like \"is_admin\" \n        from \"false\" to \"true\"). <br> <br> <b><font color=\"#ef5350\"> Remediation: <\/font><\/b> The following \n        techniques may be checked for ensuring RBAC is in place <b><font color=\"#ef5350\"> \n        <sup>( 2 ) ( 4 ) ( 5 )<\/sup><\/font><\/b>.<br> <br><ul> <li>Deny all access by default, requiring \n        explicit grants to specific roles for access to every function.<\/li> <li>Review your API\n         endpoints against function level authorization flaws, while keeping in mind the business logic\n          of the application and groups hierarchy.<\/li> <li>Make sure that all of your administrative\n           controllers inherit from an administrative abstract controller that implements authorization\n            checks based on the user\u2019s group/role.<\/li> <li>Make sure that administrative functions \n            inside a regular controller implements authorization checks based on the user\u2019s group and\n             role. <\/li> <\/ul> <b><font color=\"#ef5350\"> References: <\/font><\/b><br> <ol> <li>Enforce Access\n              Controls - https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html<\/li> <li>OWASP 2019 API Top 10 - https://github.com/OWASP/API-Security/raw/master/2019/en/dist/owasp-api-security-top-10.pdf<\/li> <li>Broken Access Control - https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control<\/li> <li>OWASP Access Control Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html<\/li> <li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"8.1","problem.severity":"error","tags":["OWASP - OTG-IDENT-001 ","FX Top 10 - API Vulnerability","Endpoint_Access_Control"]}},{"help":{"text":"More Details"},"id":"Open_Api_Spec_Compliance","fullDescription":{"text":"Validates if the Spec is latest and uptodate"},"properties":{"security-severity":"6.4","problem.severity":"error","tags":[]}},{"help":{"text":"<ul> <li>Session Management and Authentication<\/li> <li>API Keys<\/li> <li>OpenID Connect, OAuth2, and SAML<\/li> <li>Access Controls <\/li> <li>Rate Limits <\/li> <li>Input Validation and HTTP Return Codes<\/li> <\/ul>"},"id":"InvalidAuth","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Authentication Exploit <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Overview: <\/strong> RESTful API is an application program interface (API) that uses HTTP requests to GET, PUT, POST, and DELETE data. A RESTful API \u2014 also referred to as a RESTful web service \u2014 is based on representational state transfer (REST) technology, an architectural style and approach to communications often used in web services development. These exposed endpoints should not be open to all and should be protected. A top priority for the organizations is to have Secured Endpoints. <br> <br> The 'Authentication Exploit' scanning identifies vulnerabilities resulting from either skipping or using cached results for expired or invalid tokens/authorization header values.<br/><br/>Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently. Compromising system's ability to identify the client/user, compromises API security overall. <br> <br> <strong class=\"text-danger\">Severity: <\/strong> The difficulty of achieving API security has increased exponentially and unprotected APIs are one of the top web application security risks organizations face. OWASP included \u201cUnprotected APIs\u201d in its proposal for 2017 top 10 list. <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Vulnerability Impact: <\/strong> Every exposed API end-point will have some action to be performed thru appropriate HTTP method and not all methods are valid for every single end-point. Left unchecked and opened for access to all, the following are some of the consequences <strong class=\"text-danger\"><sup>( 3 )<\/sup><\/strong>. <br> <br> <ul> <li>Unnecessary Data Exposure and Data theft and corruption<\/li> <li>Denial of Service Attacks \u2013 can render your RESTful API into non-functional state<\/li> <li>Malicious Code Injection \u2013 including SQL Injections<\/li> <li>Anti-Farming \u2013 RESTful APIs should be prevented from excessive farming.<\/li> <\/ul> <br> <strong class=\"text-danger\">Exploitation: <\/strong> Almost all kinds of authentication, injection, encryption, configuration, access control, and other issues can possible in the RESTful APIs as like the traditional application. Since APIs includes complex data structures and protocols, the security testing may become cumbersome for an attacker. But it is quite possible to analyze APIs and discover vulnerabilities and exploit <strong class=\"text-danger\"><sup>( 4 )<\/sup><\/strong>. <br> <br> <strong class=\"text-danger\">Remediation: <\/strong> The following techniques may be utilized for having Secured Endpoints <strong class=\"text-danger\"><sup>( 3 ) ( 5 ) ( 6 )<\/sup><\/strong>.<br> <br><ul> <li>Session Management and Authentication<\/li> <li>API Keys<\/li> <li>OpenID Connect, OAuth2, and SAML<\/li> <li>Access Controls <\/li> <li>Rate Limits <\/li> <li>Input Validation and HTTP Return Codes<\/li> <\/ul> <strong class=\"text-danger\">References: <\/strong> <br> <ol> <li>Representational State Transfer (REST) - https://en.wikipedia.org/wiki/Representational_state_transfer<\/li> <li>OWASP 2017 Top 10 Proposal \u2013Unprotected APIs - https://www.owasp.org/index.php?title=Top_10_2017-A10-Underprotected_APIs&oldid=228947<\/li> <li>RESTful API Security - https://dzone.com/articles/restful-api-security<\/li> <li>API Exploits - https://www.hack2secure.com/blogs/what-are-api-exploits<\/li> <li>REST API Security Guidelines - https://dzone.com/articles/top-5-rest-api-security-guidelines<\/li> <li>OWASP REST Security Cheat Sheet - https://www.owasp.org/index.php/REST_Security_Cheat_Sheet<\/li> <\/ol> <br>"},"properties":{"security-severity":"9.1","problem.severity":"error","tags":["OWASP A2","OWASP A5","OWASP A6","OWASP A7","[PCI DSS 3.0] 6.5.8","[PCI DSS 3.0] 6.5.10","OTG-AUTHN-004","FX Top 10 - API Vulnerability","Non-Intrusive"]}},{"help":{"text":"<ul> <li>Session Management and Authentication<\/li> <li>API Keys<\/li> <li>OpenID Connect, OAuth2, and SAML<\/li> <li>Access Controls <\/li> <li>Rate Limits <\/li> <li>Input Validation and HTTP Return Codes<\/li> <\/ul>"},"id":"InvalidAuthEmpty","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Authentication Exploit (Empty) <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Overview: <\/strong> RESTful API is an application program interface (API) that uses HTTP requests to GET, PUT, POST, and DELETE data. A RESTful API \u2014 also referred to as a RESTful web service \u2014 is based on representational state transfer (REST) technology, an architectural style and approach to communications often used in web services development. These exposed endpoints should not be open to all and should be protected. A top priority for the organizations is to have Secured Endpoints. <br> <br> The 'Authentication Exploit (Empty)' scanning identifies vulnerabilities resulting from either skipping or using cached results for expired or invalid tokens/authorization header values.<br/><br/>Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently. Compromising system's ability to identify the client/user, compromises API security overall. <br> <br> <strong class=\"text-danger\">Severity: <\/strong> The difficulty of achieving API security has increased exponentially and unprotected APIs are one of the top web application security risks organizations face. OWASP included \u201cUnprotected APIs\u201d in its proposal for 2017 top 10 list. <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Vulnerability Impact: <\/strong> Every exposed API end-point will have some action to be performed thru appropriate HTTP method and not all methods are valid for every single end-point. Left unchecked and opened for access to all, the following are some of the consequences <strong class=\"text-danger\"><sup>( 3 )<\/sup><\/strong>. <br> <br> <ul> <li>Unnecessary Data Exposure and Data theft and corruption<\/li> <li>Denial of Service Attacks \u2013 can render your RESTful API into non-functional state<\/li> <li>Malicious Code Injection \u2013 including SQL Injections<\/li> <li>Anti-Farming \u2013 RESTful APIs should be prevented from excessive farming.<\/li> <\/ul> <br> <strong class=\"text-danger\">Exploitation: <\/strong> Almost all kinds of authentication, injection, encryption, configuration, access control, and other issues can possible in the RESTful APIs as like the traditional application. Since APIs includes complex data structures and protocols, the security testing may become cumbersome for an attacker. But it is quite possible to analyze APIs and discover vulnerabilities and exploit <strong class=\"text-danger\"><sup>( 4 )<\/sup><\/strong>. <br> <br> <strong class=\"text-danger\">Remediation: <\/strong> The following techniques may be utilized for having Secured Endpoints <strong class=\"text-danger\"><sup>( 3 ) ( 5 ) ( 6 )<\/sup><\/strong>.<br> <br><ul> <li>Session Management and Authentication<\/li> <li>API Keys<\/li> <li>OpenID Connect, OAuth2, and SAML<\/li> <li>Access Controls <\/li> <li>Rate Limits <\/li> <li>Input Validation and HTTP Return Codes<\/li> <\/ul> <strong class=\"text-danger\">References: <\/strong> <br> <ol> <li>Representational State Transfer (REST) - https://en.wikipedia.org/wiki/Representational_state_transfer<\/li> <li>OWASP 2017 Top 10 Proposal \u2013Unprotected APIs - https://www.owasp.org/index.php?title=Top_10_2017-A10-Underprotected_APIs&oldid=228947<\/li> <li>RESTful API Security - https://dzone.com/articles/restful-api-security<\/li> <li>API Exploits - https://www.hack2secure.com/blogs/what-are-api-exploits<\/li> <li>REST API Security Guidelines - https://dzone.com/articles/top-5-rest-api-security-guidelines<\/li> <li>OWASP REST Security Cheat Sheet - https://www.owasp.org/index.php/REST_Security_Cheat_Sheet<\/li> <\/ol> <br>"},"properties":{"security-severity":"9.1","problem.severity":"error","tags":["OWASP A2","OWASP A5","OWASP A6","OWASP A7","[PCI DSS 3.0] 6.5.8","[PCI DSS 3.0] 6.5.10","OTG-AUTHN-004","FX Top 10 - API Vulnerability","Non-Intrusive"]}},{"help":{"text":"<ul> <li>Session Management and Authentication<\/li> <li>API Keys<\/li> <li>OpenID Connect, OAuth2, and SAML<\/li> <li>Access Controls <\/li> <li>Rate Limits <\/li> <li>Input Validation and HTTP Return Codes<\/li> <\/ul>"},"id":"InvalidAuthSQL","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Authentication Exploit (SQL) <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Overview: <\/strong> RESTful API is an application program interface (API) that uses HTTP requests to GET, PUT, POST, and DELETE data. A RESTful API \u2014 also referred to as a RESTful web service \u2014 is based on representational state transfer (REST) technology, an architectural style and approach to communications often used in web services development. These exposed endpoints should not be open to all and should be protected. A top priority for the organizations is to have Secured Endpoints. <br> <br> The 'Authentication Exploit (SQL)' scanning identifies vulnerabilities resulting from SQL injection attack prone authorization logic.<br/><br/>Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently. Compromising system's ability to identify the client/user, compromises API security overall. <br> <br> <strong class=\"text-danger\">Severity: <\/strong> The difficulty of achieving API security has increased exponentially and unprotected APIs are one of the top web application security risks organizations face. OWASP included \u201cUnprotected APIs\u201d in its proposal for 2017 top 10 list. <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Vulnerability Impact: <\/strong> Every exposed API end-point will have some action to be performed thru appropriate HTTP method and not all methods are valid for every single end-point. Left unchecked and opened for access to all, the following are some of the consequences <strong class=\"text-danger\"><sup>( 3 )<\/sup><\/strong>. <br> <br> <ul> <li>Unnecessary Data Exposure and Data theft and corruption<\/li> <li>Denial of Service Attacks \u2013 can render your RESTful API into non-functional state<\/li> <li>Malicious Code Injection \u2013 including SQL Injections<\/li> <li>Anti-Farming \u2013 RESTful APIs should be prevented from excessive farming.<\/li> <\/ul> <br> <strong class=\"text-danger\">Exploitation: <\/strong> Almost all kinds of authentication, injection, encryption, configuration, access control, and other issues can possible in the RESTful APIs as like the traditional application. Since APIs includes complex data structures and protocols, the security testing may become cumbersome for an attacker. But it is quite possible to analyze APIs and discover vulnerabilities and exploit <strong class=\"text-danger\"><sup>( 4 )<\/sup><\/strong>. <br> <br> <strong class=\"text-danger\">Remediation: <\/strong> The following techniques may be utilized for having Secured Endpoints <strong class=\"text-danger\"><sup>( 3 ) ( 5 ) ( 6 )<\/sup><\/strong>.<br> <br><ul> <li>Session Management and Authentication<\/li> <li>API Keys<\/li> <li>OpenID Connect, OAuth2, and SAML<\/li> <li>Access Controls <\/li> <li>Rate Limits <\/li> <li>Input Validation and HTTP Return Codes<\/li> <\/ul> <strong class=\"text-danger\">References: <\/strong> <br> <ol> <li>Representational State Transfer (REST) - https://en.wikipedia.org/wiki/Representational_state_transfer<\/li> <li>OWASP 2017 Top 10 Proposal \u2013Unprotected APIs - https://www.owasp.org/index.php?title=Top_10_2017-A10-Underprotected_APIs&oldid=228947<\/li> <li>RESTful API Security - https://dzone.com/articles/restful-api-security<\/li> <li>API Exploits - https://www.hack2secure.com/blogs/what-are-api-exploits<\/li> <li>REST API Security Guidelines - https://dzone.com/articles/top-5-rest-api-security-guidelines<\/li> <li>OWASP REST Security Cheat Sheet - https://www.owasp.org/index.php/REST_Security_Cheat_Sheet<\/li> <\/ol> <br>"},"properties":{"security-severity":"9.1","problem.severity":"error","tags":["OWASP A1","[PCI DSS 3.0] 6.5.1","OTG-AUTHN-004","FX Top 10 - API Vulnerability","Non-Intrusive","Injection"]}},{"help":{"text":"<ul>\n<li>Ensure that all failures are logged and reviewed.<\/li>\n<li>Ensure that all password failures are logged and reviewed.<\/li>\n<li>Ensure that all account lockouts are logged and reviewed.<\/li>\n<\/ul>"},"id":"Report_Successful_And_Unsuccessful_Login_Attempts","fullDescription":{"text":"<strong class=\"text-danger\"> Name: <\/strong>Report Successful And Unsuccessful Login Attempts<strong class=\"text-danger\"><sup>( 1 ) ( 2 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Overview: <\/strong>Malicious individuals will often perform multiple access attempts on targeted systems. Multiple invalid login attempts may be an indication of an unauthorized user\u2019s attempts to \u201cbrute force\u201d or guess a password.<br>\n<br>\nRecording and monitoring successful and unsuccessful logins assist in tracking unauthorized access to the system. Without this logging, the ability to track unauthorized activity to specific user accounts may be diminished.<strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Severity: <\/strong>Implementing audit trails to link all access to system components to each individual user and implement automated audit trails for all system components for reconstruct of an event is part of PCI DSS compliance requirements.<strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact:  <\/strong>Generating audit trails of suspect activities alerts the system administrator, sends data to other monitoring mechanisms (like intrusion detection systems), and provides a history trail for post-incident follow-up. Failure to log, monitor and not reacting to unsccuessful login event on time may cause a malicious user have access to confidential information or data, administration panels and opportunities for further attacks.<strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Remediation: <\/strong>Enable logging and monitoring of authentication functions to detect attacks/failures on a real-time basis. <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong> <br>\n<ul>\n<li>Ensure that all failures are logged and reviewed.<\/li>\n<li>Ensure that all password failures are logged and reviewed.<\/li>\n<li>Ensure that all account lockouts are logged and reviewed.<\/li>\n<\/ul>\n<strong class=\"text-danger\">References: <\/strong><br>\n<ol>\n<li>https://www.pcisecuritystandards.org/documents/Effective-Daily-Log-Monitoring-Guidance.pdf<\/li>\n<li>https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.0","problem.severity":"error","tags":[]}},{"help":{"text":"More Details"},"id":"Empty_Value","fullDescription":{"text":"Negative tests with empty values."},"properties":{"security-severity":"6.0","problem.severity":"error","tags":["Fuzz"]}},{"help":{"text":"<ul>\n<li>Deny all access by default, requiring explicit grants to specific roles for access to every function.<\/li>\n<li>Review your API endpoints against function level authorization flaws, while keeping in mind the business logic of the application and groups hierarchy.<\/li>\n<li>Make sure that all of your administrative controllers inherit from an administrative abstract controller that implements authorization checks based on the user\u2019s group/role.<\/li>\n<li>Make sure that administrative functions inside a regular controller implement authorization checks based on the user\u2019s group and role. <\/li>\n<\/ul>"},"id":"Rbac_(scope)","fullDescription":{"text":"<strong class=\"text-danger\"> Name: <\/strong>RBAC Scope<strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\n\n<strong class=\"text-danger\">Overview:  <\/strong> The use of Role-based Access Control(RBAC) has evolved within both large and medium organizations. Although RBAC provides a solid foundation for managing information security, administrators may be burdened with the maintenance of hundreds or thousands of roles across several applications. Managing these roles, users and their interrelationships is a formidable task that is often highly centralized in small teams of security administrators. This is a daunting task in large organizations where security practitioners perform access control as a secondary duty and are provided various levels of training and formalized knowledge<strong class=\"text-danger\"><sup>( 1 ) ( 2 )<\/sup><\/strong><br>\n\n<br> In API world, With RBAC Scope, users are granted the privilege to only execute and invoke APIs that are needed to perform their tasks. Without access control, users would be allowed to invoke any APIs and perform any functions on the system.<br>\n\n<br>\n<strong class=\"text-danger\">Severity: <\/strong> OWASP 2019 API Top 10 ranks RBAC vulnerabilities at 5th position. And OWASP 2017 Top 10 ranks Broken Access control at the 5th position. <strong class=\"text-danger\"><sup>( 4 ) ( 5 )<\/sup><\/strong><br>\n\n<br>\n<strong class=\"text-danger\">Vulnerability Impact: <\/strong> With flawed or broken RBAC security control policy in place, The following are some of the consequences.<br>\n\n<br><ul>\n<li>Attackers can take advantage of privilege escalation and perform actions not intended.<\/li>\n<li>Exposure of Sensitive data to persons not authorized. <\/li>\n<\/ul>\n\n<strong class=\"text-danger\">Exploitation:  <\/strong> Exploitation requires the attacker to send legitimate API calls to the API endpoint that they should not have access to. These endpoints might be exposed to anonymous users or regular, non-privileged users. It\u2019s easier to discover these flaws in APIs since APIs are more structured, and the way to access certain functions is more predictable (e.g., replacing the HTTP method from GET to PUT, or changing the \u201cusers\u201d string in the URL to \"admins\", or changing the value of a parameter like \"is_admin\" from \"false\" to \"true\"). <br>\n<br>\n\n<strong class=\"text-danger\">Remediation: <\/strong> The following techniques may be checked for ensuring RBAC Scope is in place <strong class=\"text-danger\"><sup>( 4 ) ( 6 ) ( 7 )<\/sup><\/strong>.<br>\n<br><ul>\n<li>Deny all access by default, requiring explicit grants to specific roles for access to every function.<\/li>\n<li>Review your API endpoints against function level authorization flaws, while keeping in mind the business logic of the application and groups hierarchy.<\/li>\n<li>Make sure that all of your administrative controllers inherit from an administrative abstract controller that implements authorization checks based on the user\u2019s group/role.<\/li>\n<li>Make sure that administrative functions inside a regular controller implements authorization checks based on the user\u2019s group and role. <\/li>\n<\/ul>\n\n<strong class=\"text-danger\">References: <\/strong><br>\n<ol>\n<li>Role-based Access Control: https://en.wikipedia.org/wiki/Role-based_access_control<\/li>\n<li>Role Explosion: Acknowledging the Problem: http://knight.segfaults.net/papers/20100502%20-%20Aaron%20Elliott%20-%20WOLRDCOMP%202010%20Paper.pdf<\/li>\n<li>Enforce Access Controls - https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html<\/li>\n<li>OWASP 2019 API Top 10 - https://github.com/OWASP/API-Security/raw/master/2019/en/dist/owasp-api-security-top-10.pdf<\/li>\n<li>Broken Access Control - https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control<\/li>\n<li>OWASP Access Control Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html<\/li>\n<li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"8.1","problem.severity":"error","tags":[]}},{"help":{"text":"<ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul>"},"id":"ABAC_Level7","fullDescription":{"text":"<b><font color=\"#ef5350\">Name: <\/font><\/b> Attribute Based Access Control 7 (ABAC 7) <b><font color=\"#ef5350\"><sup>( 1 )<\/sup><\/font><\/b><br> <br> <b><font color=\"#ef5350\">Overview: <\/font><\/b> Access Control (or Authorization) is the process of granting or denying specific requests from a user, program, or process. Access control also involves the act of granting and revoking those privileges. Attribute Based Access Control (ABAC) will grant or deny user requests based on arbitrary attributes of the user and arbitrary attributes of the object, and environment conditions that may be globally recognized and more relevant to the policies at hand. <br> <br>'Attribute-based-access-control 7' identifies dependent and nested resource/data/record vulnerabilities. e.g. vulnerabilities in tasks which is nested within a project and the access-controls may only be applied at the project level. ABAC scanning identifies data/resource leak/attack vulnerabilities. Looks for private user/account data being illegally read, written, updated, deleted or operated by other users or tenants or accounts.<br> <br>This scanner requires a private-account/user to create private data/resources e.g. UserA. And it also requires other users who shouldn't have any access to UserA's data like UserB, UserC, & UserD based on your App multi-tenancy model. e.g. UserA can be a user from tenant/org-a and UserB can be a user in tenant-b and UserC can be a user in tenant-c with admin privileges.<br> <br>APIs tend to expose endpoints that handle object identifiers, creating a wide attack surface Level Access Control issue. Object-level authorization checks should be considered in every function that accesses a data source using input from the user.<br> <br> <b><font color=\"#ef5350\">Severity: <\/font><\/b> OWASP 2019 API Top 10 ranks ABAC vulnerabilities at Top 1 position and is named Broken Object Level Authorization. <b><font color=\"#ef5350\"><sup>( 2 )<\/sup><\/font><\/b> <br> <br> <b><font color=\"#ef5350\">Vulnerability Impact: <\/font><\/b> With flawed or broken ABAC security control policy in place, The following are some of the consequences. <br> <br><ul> <li>Unauthorized access can result in data disclosure to unauthorized parties, data loss, or data manipulation.<\/li> <li>Unauthorized access to objects can also lead to full account takeover.<\/li> <\/ul> <b><font color=\"#ef5350\">Exploitation: <\/font><\/b> Attackers can exploit API endpoints that are vulnerable to broken object level authorization by manipulating the ID of an object that is sent within the request. This may lead to unauthorized access to sensitive data. This issue is  extremely common in API-based applications because the server component usually does not fully track the client\u2019s state, and instead, relies more on parameters like object IDs, that are sent from the client to decide which objects to access. <br> <br> <b><font color=\"#ef5350\">Remediation: <\/font><\/b> The following techniques may be checked for ensuring RBAC is in place <b><font color=\"#ef5350\"><sup>( 2 ) ( 3 ) ( 4 )<\/sup><\/font><\/b>. <br> <br><ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul> <b><font color=\"#ef5350\">References: <\/font><\/b><br> <ol> <li>Enforce Access Controls - https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html<\/li> <li>OWASP 2019 API Top 10 - https://github.com/OWASP/API-Security/raw/master/2019/en/dist/owasp-api-security-top-10.pdf<\/li> <li>OWASP Access Control Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html<\/li> <li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"8.1","problem.severity":"error","tags":["FX Top 10 - API Vulnerability","Data_Access_Control"]}},{"help":{"text":"More Details"},"id":"Incremental_Ids_L2","fullDescription":{"text":"Incremental Ids Level 2"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":[]}},{"help":{"text":"<ul> <li>Use of Prepared Statements \t\t\t<\/li> <li>Use of Stored Procedures\t\t\t<\/li> <li>White list input validation\t\t\t<\/li> <li>Escaping all user supplied input \t<\/li> <li>Enforcing Least Privilege \t\t\t<\/li> <\/ul>"},"id":"SQL_Injection2","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> SQL Injection <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Overview:<\/strong> SQL Injection is an Attack. It is executed by insertion or \u201cInjection\u201d of either partial or complete SQL query via query parameters, request body parameters, path parameters and passed to the application server/database.<br> <br> <strong class=\"text-danger\">Severity:<\/strong> SQL Injection is classified under the category of \u201cInjection Attacks\u201d by OWASP. \u201cInjection Attacks\u201d is consistently rated at Top 1 Category of Attack by OWASP in years 2010, 2013 and 2017 <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong>. SQL Injection is rated top 1 in the CWE / SANS Top 25 <strong class=\"text-danger\"><sup>( 3 ) ( 4 )<\/sup><\/strong>. <br> <br> <strong class=\"text-danger\">Vulnerability Impact:<\/strong> A Successful SQL Injection attack <br> <br><ul> <li>Can read sensitive data from the database<\/li> <li>Can modify the database data thru Insert / Update / Delete statements<\/li> <li>Can execute administrative operations on the database<\/li> <li>Can recover the content of the given file existing on the database<\/li> <li>Can write files into the file system<\/li> <li>Can issue commands to the operating System<\/li> <\/ul> <strong class=\"text-danger\">Exploitation:<\/strong> A successful SQL Injection attack is possible when the attacker crafts a syntactically Correct SQL Query. If an error is thrown back by the API by incorrect query, it will become much easier for the attacker to reconstruct the logic of the original query. If error is hidden, the attacker may have to reverse engineer for an exploitation. It might happen because of the following<br> <br><ul> <li>User supplied data is NOT validated, filtered or sanitized by the application<\/li> <li>Dynamic queries or non-parameterized calls without context-aware escaping<\/li> <\/ul> <strong class=\"text-danger\"> Remediation: <\/strong> A successful SQL Injection attack may possibly be avoided by Secure Coding Practices as outlined by OWASP SQL injection Prevention Cheat Sheet <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>. The following are some of the techniques for remediating SQL Injection attacks. <br> <br><ul> <li>Use of Prepared Statements \t\t\t<\/li> <li>Use of Stored Procedures\t\t\t<\/li> <li>White list input validation\t\t\t<\/li> <li>Escaping all user supplied input \t<\/li> <li>Enforcing Least Privilege \t\t\t<\/li> <\/ul> <strong class=\"text-danger\"> References:<\/strong><br> <ol> <li>SQL Injection: https://www.owasp.org/index.php/SQL_Injection<\/li> <li>OWASP Top 10 \u2013 2017 \u2013 A1 Injection - https://www.owasp.org/index.php/Top_10-2017_A1-Injection<\/li> <li>CWE \u2013 SANS \u2013 TOP 25 - http://cwe.mitre.org/top25/<\/li> <li>Common Weakness Enumeration \u2013 SQL Injection - http://cwe.mitre.org/data/definitions/89.html<\/li> <li>OWASP SQL Injection Prevention Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"9.6","problem.severity":"error","tags":["OWASP A1","[PCI DSS 3.0] 6.5.1","OWASP - OTG-INPVAL-005","FX Top 10 - API Vulnerability","Injection"]}},{"help":{"text":"<ul> <li>Never Insert Untrusted Data Except in Allowed Locations<\/li> <li>HTML Escape Before Inserting Untrusted Data into HTML Element Content<\/li> <li>Attribute Escape Before Inserting Untrusted Data into HTML Common Attributes<\/li> <li>JavaScript Escape Before Inserting Untrusted Data into JavaScript Data Values<\/li> <li>CSS Escape And Strictly Validate Before Inserting Untrusted Data into HTML Style Property Values<\/li> <li>URL Escape Before Inserting Untrusted Data into HTML URL Parameter Values<\/li> <\/ul>"},"id":"XSS_Injection","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> XSS Injection <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Overview: <\/strong>  Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. <br> <br> Looking forward to generic implementations, developers tend to expose all object properties without considering their individual sensitivity, relying on clients to perform the data filtering before displaying it to the user.<br> <br> Security misconfiguration is commonly a result of insecure default configurations, incomplete or ad-hoc configurations, open cloud storage, misconfigured HTTP headers, unnecessary HTTP methods, permissive Cross-Origin resource sharing (CORS), and verbose error messages containing sensitive information.<br> <br> <strong class=\"text-danger\">Severity: <\/strong> Cross-Site Scripting is consistently ranked at top 1 in 2017 OWASP Top 10, 2013 OWASP Top 10 and is ranked at Top 8 in 2019 OWASP API Top 10. <strong class=\"text-danger\"><sup>( 2 )( 3 )( 4 )<\/sup><\/strong>.<br> <br> <strong class=\"text-danger\">Vulnerability Impact: <\/strong> When successfully injected and executed, XSS attack can lead to following consequences <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong> <br> <br><ul> <li>Capturing sensitive information viewed by application users <\/li> <li>Hijacking another user\u2019s browser session and takeover of the account <\/li> <li>The disclosure of end user files and/or installation of Trojan horse programs<\/li> <li>Pseudo defacement of the application<\/li> <li>Port scanning of internal hosts (\u201cinternal\u201d in relation to the users of the web application)<\/li> <\/ul> <strong class=\"text-danger\">Exploitation:  <\/strong> Cross-Site Scripting (XSS) attacks occur when: <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong>. <br> <br> <ul> <li>Data enters a Web application through an untrusted source, most frequently a web request.<\/li> <li>The data is included in dynamic content that is sent to a web user without being validated for malicious content.<\/li> <\/ul> <br> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash, or any other type of code that the browser may execute<br> <br> <strong class=\"text-danger\">Remediation: <\/strong> With the following guidelines, XSS Injection attack can be prevented <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>. <br> <br> <ul> <li>Never Insert Untrusted Data Except in Allowed Locations<\/li> <li>HTML Escape Before Inserting Untrusted Data into HTML Element Content<\/li> <li>Attribute Escape Before Inserting Untrusted Data into HTML Common Attributes<\/li> <li>JavaScript Escape Before Inserting Untrusted Data into JavaScript Data Values<\/li> <li>CSS Escape And Strictly Validate Before Inserting Untrusted Data into HTML Style Property Values<\/li> <li>URL Escape Before Inserting Untrusted Data into HTML URL Parameter Values<\/li> <\/ul> <strong class=\"text-danger\">References: <\/strong><br> <ol> <li>Cross-site Scripting (XSS) - https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)<\/li> <li>OWASP Top Ten Project - https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project<\/li> <li>https://www.owasp.org/index.php/Top_10-2017_A1-Injection<\/li> <li>OWASP API Security Project - https://www.owasp.org/index.php/OWASP_API_Security_Project<\/li> <li>Cross Site Scripting Prevention -  https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html<\/li> <\/ol><br> <br>"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":["OWASP A3","OWASP A7","[PCI DSS 3.0] 6.5.7","[PCI DSS 3.2] 6.5.7 ","OWASP - OTG-INPVAL-001","OWASP - OTG-INPVAL-002","FX Top 10 - API Vulnerability","INPUT VALIDATION","NON-INTRUSIVE"]}},{"help":{"text":"<ul>\n<li>HTTPS/TLS should be used with basic authentication.<\/li>\n<li>Classify data processed, stored or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs.<\/li>\n<li>Apply controls as per the classification.<\/li>\n<li>Encrypt all data in transit with secure protocols such as TLS with perfect forward secrecy (PFS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).<\/li>\n<\/ul>"},"id":"Http_Authentication_Scheme","fullDescription":{"text":"<b><font color=\"#ef5350\"> Name:  <\/font><\/b>  HTTP Authentication Scheme    <b><font color=\"#ef5350\"><sup>( 1 )<\/sup><\/font><\/b><br>\n<br>\n<strong class=\"text-danger\">Overview: <\/strong> Authentication is the process of identifying whether a client is eligible to access a resource. The HTTP protocol supports authentication as a means of negotiating access to a secure resource.<br>\n<br>\nThe general HTTP authentication framework is used by several authentication schemes. Schemes can differ in security strength and in their availability in client or server software. The server can specify multiple authentication schemes for the client to choose from. The most commonly used API Authentication schemes are <br>\n<br>\n<ul>\n<li>Basic <\/li>\n<li>API Key <\/li>\n<li>OAuth or OAuth 2.0  <\/li>\n<\/ul>\nThe \"Basic\" HTTP authentication scheme transmits credentials as user ID/password pairs, encoded using base64. As the user ID and password are passed over the network as clear text (it is base64 encoded, but base64 is a reversible encoding), the basic authentication scheme is not secure. HTTPS/TLS should be used with basic authentication. Without these additional security enhancements, basic authentication should not be used to protect sensitive or valuable information.<br>\n<br>\nOAuth is the most widespread method used at it delivers a ton of benefits, from ease of use to a federated system module, and most importantly offers scalability of security.<br>\n<br>\n<strong class=\"text-danger\">Severity: <\/strong>  Not having a secure Authentication Scheme can lead to expose of Sensitive Data and Sensitive Data Exposure is rated at 3rd position in 2017 OWASP Top 10.  <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact:  <\/strong>   Authentication mechanisms and schemes, if implemented incorrectly, may allow attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently, compromising system's ability to identify the client/user and may compromise API security overall. The following are some of the consequences.<br>\n<br> \n<ul>\n<li>Unnecessary Data Exposure and Data theft.<\/li>\n<li>Exposure of Clients data and Personal Identifiable Information.<\/li>\n<li>Can be financially devastating to the organization.<\/li>\n<li>Non-compliance to data regulations like EU GDPR or local privacy laws.<\/li>\n<\/ul>\n<strong class=\"text-danger\">Remediation:  <\/strong>  The following may be employed to implement proper authentication scheme. <br>\n<br>\n<ul>\n<li>HTTPS/TLS should be used with basic authentication.<\/li>\n<li>Classify data processed, stored or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs.<\/li>\n<li>Apply controls as per the classification.<\/li>\n<li>Encrypt all data in transit with secure protocols such as TLS with perfect forward secrecy (PFS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).<\/li>\n<\/ul>\n\n<strong class=\"text-danger\">References: <\/strong><br>\n<br>\n<ol>\n<li>https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication<\/li>\n<li>https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure<\/li>\n<li>https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":[]}},{"help":{"text":"<ul>\n<li>Avoid relying on clients to filter the data<\/li>\n<li>Define specific schemas for each API responses<\/li>\n<li>Ensure data is returned to match what consumers really need<\/li>\n<li>Enforce response checks to prevent accidental leaks of data or exceptions<\/li>\n<li>Identify Sensitive and Personal Identifiable Information and be particular about exposing such info only on a need to know basis<\/li> \n<\/ul>"},"id":"Excessive_Data_Exposure","fullDescription":{"text":"<b><font color=\"#ef5350\"> Name: <\/font><\/b>Excessive Data Exposure <b><font color=\"#ef5350\"><sup>( 1 )<\/sup><\/font><\/b><br>\n<br>\n<b><font color=\"#ef5350\">Overview: <\/font><\/b> In an effort to make more generic APIs, developers inadvertently tend to expose more data than required by clients. The logic to show the required data is implemented at the client level. Some of the data elements exposed, sensitive to business and organizations, if lands in the hands of attackers can cause serious damage to reputation of the organization. \n<br>\nsince APIs use JSON data object as means of data exchange, this category is to check the depth of the JSON data object and lets developers put a check on the depth of the JSON data object. The objective is to let developers take a proactive approach to limit the data exposed. <b><font color=\"#ef5350\"><sup>( 1 )<\/sup><\/font><\/b>\n<br>\n<br> \n<b><font color=\"#ef5350\">Severity: <\/font><\/b> OWASP 2019 API Top 10 ranks Excessive Data Exposure at 3rd position. And OWASP 2017 Top 10 ranks Sensitive Data Exposure at the 3rd position. <b><font color=\"#ef5350\"><sup>( 1 ) ( 2 )<\/sup><\/font><\/b><br>\n<br>\n<b><font color=\"#ef5350\">Vulnerability Impact: <\/font><\/b> With excessive data exposed, The following are some of the consequences.<br>\n<br><ul>\n<li>Unnecessary Data Exposure and Data theft.<\/li>\n<li>Exposure of Clients data and Personal Identifiable Information. <\/li>\n<li>Can be financially devastating to the organization.<\/li>\n<li>Non-compliance to data regulations like EU GDPR or local privacy laws.<\/li>\n<\/ul>\n<b><font color=\"#ef5350\">Exploitation:  <\/font><\/b> Exploitation requires the attacker to send legitimate API calls to the API endpoint that they have access to and peruse the data returned to get hold of sensitive data. <br>\n<br>\n<b><font color=\"#ef5350\">Remediation: <\/font><\/b> The following techniques may be checked for ensuring Excessive Data is not exposed.<br>\n<br><ul>\n<li>Avoid relying on clients to filter the data<\/li>\n<li>Define specific schemas for each API responses<\/li>\n<li>Ensure data is returned to match what consumers really need<\/li>\n<li>Enforce response checks to prevent accidental leaks of data or exceptions<\/li>\n<li>Identify Sensitive and Personal Identifiable Information and be particular about exposing such info only on a need to know basis<\/li> \n<\/ul>\n<b><font color=\"#ef5350\">References: <\/font><\/b><br>\n<ol>\n<li>API3:2019 Excessive Data Exposure -\thttps://owasp.org/www-project-api-security/<\/li>\n<li>A3-Sensitive Data Exposure - https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure <\/li>\n<li>CWE-200: Exposure of Sensitive Information to an Unauthorized Actor - https://cwe.mitre.org/data/definitions/200.html<\/li>\n<\/ol>\n<br>\n"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":[]}},{"help":{"text":"<ul> \n<li>Network Controls \u2013 Allowing for blacklisting of IP Addresses and CIDR Ranges<\/li> \n<li>Rate Controls \u2013 Different threshold criterion can be defined to avoid volumetric flooding<\/li> \n<li>Site Defenders \u2013 to identify Slow Posts that open HTTP connections and then slowing sending data very slowly.<\/li> \n<li>Web Application Firewalls \u2013 Many DoS tools have tell-tale fingerprints and can be easily identified and blocked.<\/li> \n<\/ul>"},"id":"ADoS","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> ADoS <strong class=\"text-danger\"><sup>( 1 )( 2 )<\/sup><\/strong><br>\n<br><strong class=\"text-danger\">Overview: <\/strong> Application Denial-of-Service attack aka ADoS attack is a cyber-attack in which the perpetrator seeks to make an application or machine or network resource unavailable to its intended users by temporarily or indefinitely disrupting services of a host connected to the Internet. <br>\n<br>ADoS attack is typically accomplished by flooding the targeted application or machine or resource with superfluous requests in an attempt to overload systems and prevent some or all legitimate requests from being fulfilled.<br> \n<br>This attack can be created with a very few tailored requests. e.g. if the API endpoints have a vulnerability which allows requesting 10,000 items or records by setting page-size=10000 or large date range on the vulnerable API endpoint, then by sending a few of these requests regularly can put the entire system unresponsive leading towards revenue and brand loss.<br>\n<br>e.g. values pageSize=101 page_size=101 /api/v1/dashboard/count-bugs-between?fromDate={{@PastDate | dd/MM/yyyy}}&toDate={{@Date | dd/MM/yyyy}} /api/v1/dashboard/count-tests-between?fromDate={{@PastDate | dd/MM/yyyy}}&toDate={{@Date | dd/MM/yyyy}}.<br>\n<br>Quite often, APIs do not impose any restrictions on the size or number of resources that can be requested by the client/user. Not only can this impact the API server performance, leading to exhaust of resources or Application Denial of Service (ADoS), but also leaves the door open to authentication flaws such as brute force.<br>\n<br> <strong class=\"text-danger\">Severity: <\/strong> ADoS is a part of Denial of Service Cyber Attack targeting specific application. These attacks are increasing on Year-on-Year basis and is consistently reported in Akamai State of Internet / Security Reports<strong class=\"text-danger\"><sup>( 3 )<\/sup><\/strong>. <br>\n<br> \n<strong class=\"text-danger\">Vulnerability Impact: <\/strong> A successful ADoS attacks can<br> <br>\n<ul>\n<li>Have an operational disruption of your application or service <\/li>\n<li>Make your  application or services unavailable for an indefinite period<\/li>\n<li>Have financial and legal consequence if application fails to live up to service level agreements<\/li>\n<li>Can have irreparable damage to company\u2019s brand reputation <\/li>\n<\/ul>\n<strong class=\"text-danger\">Exploitation: <\/strong> ADoS occurs when attackers attempt to overwhelm web applications and APIs with a flood of HTTP/HTTPS requests.  In order to obtain a high enough level of traffic, attackers typically need to leverage a large number of attacking hosts to achieve the desired effect.  One way to do this is by purchasing access to a \"booter service\" - which is a marketing term for \"Resource-Limit for Hire\" <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>.<br>\n<br> <strong class=\"text-danger\">Remediation: <\/strong> While it may not be completely possible to avoid an ADoS attack, but it is possible to identify and take remediation steps. Different protections that can be leveraged are <br>\n<br>\n<ul> \n<li>Network Controls \u2013 Allowing for blacklisting of IP Addresses and CIDR Ranges<\/li> \n<li>Rate Controls \u2013 Different threshold criterion can be defined to avoid volumetric flooding<\/li> \n<li>Site Defenders \u2013 to identify Slow Posts that open HTTP connections and then slowing sending data very slowly.<\/li> \n<li>Web Application Firewalls \u2013 Many DoS tools have tell-tale fingerprints and can be easily identified and blocked.<\/li> \n<\/ul>\n<strong class=\"text-danger\">References: <\/strong><br> \n<ol> \n<li>Understanding Denial-of-Service Attacks - https://www.us-cert.gov/ncas/tips/ST04-015<\/li> \n<li>Resource-Limit  - https://en.wikipedia.org/wiki/Denial-of-service_attack<\/li> \n<li>Akamai 2018 State of Internet / Security Report - https://www.akamai.com/us/en/about/our-thinking/state-of-the-internet-report/global-state-of-the-internet-security-Resource-Limit-attack-reports.jsp<\/li> \n<li>Akamai 2018 Attack Stats - https://www.akamai.com/us/en/multimedia/documents/infographic/Resource-Limit-web-application-attack-stats-asia-pacific-ponemon-web-security-infographic-2018.pdf<\/li> <li>The Dark Side of APIs \u2013 Denial of Service Attacks - https://blogs.akamai.com/sitr/2018/08/the-dark-side-of-apis-denial-of-service-attacks.html<\/li> \n<\/ol> \n<br>"},"properties":{"security-severity":"6.5","problem.severity":"error","tags":["[PCI DSS 3.0] 6.5.2","FX Top 10 - API Vulnerability","Intrusive"]}},{"help":{"text":"More Details"},"id":"Special_Chars","fullDescription":{"text":"Special Characters is a negative test case to check how APIs behave when special characters are sent in the data type that API is not expecting."},"properties":{"security-severity":"6.0","problem.severity":"error","tags":["OWASP - OTG-BUSLOGIC-001","Fuzz"]}},{"help":{"text":"<ul> <li>Use an \"accept known good\" input validation strategy. Reject input not strictly conforming to specifications<\/li> <li>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules<\/li> <li>Do not rely exclusively on looking for malicious or malformed inputs <\/li> <\/ul>"},"id":"Windows_Command_Injection","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Windows Injection <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong> <br> <br> <strong class=\"text-danger\">Overview: <\/strong> Windows Injection is an attack in which the attacker is able to execute OS commands on the hosting server via vulnerable application. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. <br> <br> <strong class=\"text-danger\">Severity: <\/strong> Command Injection is classified under the category of \u201cInjection Attacks\u201d by OWASP. \u201cInjection Attacks\u201d is ranked at 8th position in 2019 OWASP API Top 10 <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong> and consistently rated at Top 1 Category of Attack by OWASP in years 2010, 2013 and 2017 <strong class=\"text-danger\"><sup>( 3 )<\/sup><\/strong>. Command Injection is rated at 11th position in the CWE / SANS Top 25 <strong class=\"text-danger\"><sup>( 4 )<\/sup><\/strong>.<br> <br> <strong class=\"text-danger\">Vulnerability Impact: <\/strong> Command injection is treated under the \u201cAttack\u201d category, in which the attacker extends the default functionality of the application, which executes system commands. <br> <br><ul> <li>Upload of malicious program or even obtain password<\/li> <li>Fully compromise the hosting application<\/li> <li>Can compromise other parts of hosting infrastructure exploiting trust relationship<\/li> <\/ul> <strong class=\"text-danger\">Exploitation: <\/strong> Command Injection vulnerabilities typically occur when<br> <br><ul> <li>Data enters the application from an untrusted source.<\/li> <li>The data is part of a string that is executed as a command by the application.<\/li> <li>By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.<\/li> <\/ul> <strong class=\"text-danger\">Remediation: <\/strong> Strong input validation must be performed for user supplied input <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>. Also follow the input validation cheat sheet from OWASP <br> <br><ul> <li>Use an \"accept known good\" input validation strategy. Reject input not strictly conforming to specifications<\/li> <li>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules<\/li> <li>Do not rely exclusively on looking for malicious or malformed inputs <\/li> <\/ul> <strong class=\"text-danger\">References: <\/strong><br> <ol> <li>OS Command Injection - https://www.owasp.org/index.php/Command_Injection<\/li> <li>OWASP API Security Project - https://www.owasp.org/index.php/OWASP_API_Security_Project<\/li> <li>OWASP Top 10 \u2013 2017 \u2013 A1 Injection - https://www.owasp.org/index.php/Top_10-2017_A1-Injection<\/li> <li>CWE \u2013 SANS \u2013 TOP 25 - http://cwe.mitre.org/top25/<\/li> <li>Command Injection - http://cwe.mitre.org/data/definitions/77.html<\/li> <li>REST API Security Guidelines - https://dzone.com/articles/top-5-rest-api-security-guidelines<\/li> <li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html<\/li> <li>OWASP Input Validation Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"9.6","problem.severity":"error","tags":["OWASP A1","OWASP A3","[PCI DSS 3.0] 6.5.7","[PCI DSS 3.2] 6.5.1","OWASP - OTG-INPVAL-001","OWASP - OTG-INPVAL-002","OWASP OTG-INPVAL-013","FX Top 10 - API Vulnerability","INPUT VALIDATION","NON-INTRUSIVE"]}},{"help":{"text":"<ul>\n<li>Password Length\n<ul>\n<li>Minimum length of the passwords should be enforced by the application. Passwords shorter than 8 characters are considered to be weak.<\/li>\n<li>Maximum password length should not be set too low, as it will prevent users from creating passphrases. A common maximum length is 64 characters due to limitations in certain hashing algorithms.<\/li>\n<\/ul>\n<li>Do not silently truncate passwords.<\/li>\n<li>Include password strength meter to help users create a more complex password and block common and previously breached passwords.<\/li>\n<\/li>\n<\/ul>"},"id":"Strong_And_Unique_Password","fullDescription":{"text":"<strong class=\"text-danger\"> Name: <\/strong>Strong and Unique Password<strong class=\"text-danger\"><sup> ( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Overview: <\/strong> Authentication is the process of verifying that an individual, entity or website is whom it claims to be. Authentication in the context of web applications is commonly performed by submitting a username or ID and one or more items of private information, example Password, that only a given user should know.<br>\n<br>\nA key concern when using passwords for authentication is password strength. A \"strong\" password policy makes it difficult or even improbable for one to guess the password through either manual or automated means.<br>\n<br>\n<strong class=\"text-danger\">Severity:  <\/strong>A weak or compromised password leads to Broken Authentication. Broken Authentication is listed at 2nd position in the OWASP 2017 Security Top 10 <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong>.<br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact:  <\/strong>The impact of compromised credentials can include the breach of sensitive\ninformation and the compromise of IT systems and data, a serious loss of brand\nreputation, and financial losses that include the cost of responding to and\nremediating a breach, as well as lost sales. Executives in both the public and private\nsectors are being held accountable for security breaches, and some have lost their\njobs as a result.<br>\n<br>\n<strong class=\"text-danger\">Exploitation:  <\/strong>A weak password can easily be cracked using Brute Force Attack, Dictionary based Password Attacks and Raibow table password cracking methods.<br>\n<br>\n<strong class=\"text-danger\">Remediation:  <\/strong>The following characteristics define a strong password: <strong class=\"text-danger\"><sup>( 1 ) ( 3 )<\/sup><\/strong> <br>\n<ul>\n<li>Password Length\n<ul>\n<li>Minimum length of the passwords should be enforced by the application. Passwords shorter than 8 characters are considered to be weak.<\/li>\n<li>Maximum password length should not be set too low, as it will prevent users from creating passphrases. A common maximum length is 64 characters due to limitations in certain hashing algorithms.<\/li>\n<\/ul>\n<li>Do not silently truncate passwords.<\/li>\n<li>Include password strength meter to help users create a more complex password and block common and previously breached passwords.<\/li>\n<\/li>\n<\/ul>\n<strong class=\"text-danger\">References: <\/strong><br>\n<ol>\n<li>https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html<\/li>\n<li>https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication<\/li>\n<li>https://cwe.mitre.org/data/definitions/521.html<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.4","problem.severity":"error","tags":[]}},{"help":{"text":"<ul> <li>Use an \"accept known good\" input validation strategy. Reject input not strictly conforming to specifications<\/li> <li>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules<\/li> <li>Do not rely exclusively on looking for malicious or malformed inputs <\/li> <\/ul>"},"id":"Linux_Command_Injection","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Linux Injection <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong> <br> <br> <strong class=\"text-danger\">Overview: <\/strong> Linux Injection is an attack in which the attacker is able to execute OS commands on the hosting server via vulnerable application. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. <br> <br> <strong class=\"text-danger\">Severity: <\/strong> Command Injection is classified under the category of \u201cInjection Attacks\u201d by OWASP. \u201cInjection Attacks\u201d is ranked at 8th position in 2019 OWASP API Top 10 <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong> and consistently rated at Top 1 Category of Attack by OWASP in years 2010, 2013 and 2017 <strong class=\"text-danger\"><sup>( 3 )<\/sup><\/strong>. Command Injection is rated at 11th position in the CWE / SANS Top 25 <strong class=\"text-danger\"><sup>( 4 )<\/sup><\/strong>.<br> <br> <strong class=\"text-danger\">Vulnerability Impact: <\/strong> Command injection is treated under the \u201cAttack\u201d category, in which the attacker extends the default functionality of the application, which executes system commands. <br> <br><ul> <li>Upload of malicious program or even obtain password<\/li> <li>Fully compromise the hosting application<\/li> <li>Can compromise other parts of hosting infrastructure exploiting trust relationship<\/li> <\/ul> <strong class=\"text-danger\">Exploitation: <\/strong> Command Injection vulnerabilities typically occur when<br> <br><ul> <li>Data enters the application from an untrusted source.<\/li> <li>The data is part of a string that is executed as a command by the application.<\/li> <li>By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.<\/li> <\/ul> <strong class=\"text-danger\">Remediation: <\/strong> Strong input validation must be performed for user supplied input <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>. Also follow the input validation cheat sheet from OWASP <br> <br><ul> <li>Use an \"accept known good\" input validation strategy. Reject input not strictly conforming to specifications<\/li> <li>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules<\/li> <li>Do not rely exclusively on looking for malicious or malformed inputs <\/li> <\/ul> <strong class=\"text-danger\">References: <\/strong><br> <ol> <li>OS Command Injection - https://www.owasp.org/index.php/Command_Injection<\/li> <li>OWASP API Security Project - https://www.owasp.org/index.php/OWASP_API_Security_Project<\/li> <li>OWASP Top 10 \u2013 2017 \u2013 A1 Injection - https://www.owasp.org/index.php/Top_10-2017_A1-Injection<\/li> <li>CWE \u2013 SANS \u2013 TOP 25 - http://cwe.mitre.org/top25/<\/li> <li>Command Injection - http://cwe.mitre.org/data/definitions/77.html<\/li> <li>REST API Security Guidelines - https://dzone.com/articles/top-5-rest-api-security-guidelines<\/li> <li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html<\/li> <li>OWASP Input Validation Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"9.6","problem.severity":"error","tags":["OWASP A1","OWASP A3","[PCI DSS 3.0] 6.5.7","[PCI DSS 3.2] 6.5.1","OWASP - OTG-INPVAL-001","OWASP - OTG-INPVAL-002","OWASP OTG-INPVAL-013","FX Top 10 - API Vulnerability","INPUT VALIDATION","NON-INTRUSIVE"]}},{"help":{"text":"<ul> <li>Use an \"accept known good\" input validation strategy. Reject input not strictly conforming to specifications<\/li> <li>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules<\/li> <li>Do not rely exclusively on looking for malicious or malformed inputs <\/li> <\/ul>"},"id":"Windows_Command_Injection_Filter","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Stored Windows Injection <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong> <br> <br> <strong class=\"text-danger\">Overview: <\/strong> Stored Windows Injection is an attack in which the attacker is able to execute OS commands on the hosting server via vulnerable application. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. <br> <br> <strong class=\"text-danger\">Severity: <\/strong> Command Injection is classified under the category of \u201cInjection Attacks\u201d by OWASP. \u201cInjection Attacks\u201d is ranked at 8th position in 2019 OWASP API Top 10 <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong> and consistently rated at Top 1 Category of Attack by OWASP in years 2010, 2013 and 2017 <strong class=\"text-danger\"><sup>( 3 )<\/sup><\/strong>. Command Injection is rated at 11th position in the CWE / SANS Top 25 <strong class=\"text-danger\"><sup>( 4 )<\/sup><\/strong>.<br> <br> <strong class=\"text-danger\">Vulnerability Impact: <\/strong> Command injection is treated under the \u201cAttack\u201d category, in which the attacker extends the default functionality of the application, which executes system commands. <br> <br><ul> <li>Upload of malicious program or even obtain password<\/li> <li>Fully compromise the hosting application<\/li> <li>Can compromise other parts of hosting infrastructure exploiting trust relationship<\/li> <\/ul> <strong class=\"text-danger\">Exploitation: <\/strong> Command Injection vulnerabilities typically occur when<br> <br><ul> <li>Data enters the application from an untrusted source.<\/li> <li>The data is part of a string that is executed as a command by the application.<\/li> <li>By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.<\/li> <\/ul> <strong class=\"text-danger\">Remediation: <\/strong> Strong input validation must be performed for user supplied input <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>. Also follow the input validation cheat sheet from OWASP <br> <br><ul> <li>Use an \"accept known good\" input validation strategy. Reject input not strictly conforming to specifications<\/li> <li>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules<\/li> <li>Do not rely exclusively on looking for malicious or malformed inputs <\/li> <\/ul> <strong class=\"text-danger\">References: <\/strong><br> <ol> <li>OS Command Injection - https://www.owasp.org/index.php/Command_Injection<\/li> <li>OWASP API Security Project - https://www.owasp.org/index.php/OWASP_API_Security_Project<\/li> <li>OWASP Top 10 \u2013 2017 \u2013 A1 Injection - https://www.owasp.org/index.php/Top_10-2017_A1-Injection<\/li> <li>CWE \u2013 SANS \u2013 TOP 25 - http://cwe.mitre.org/top25/<\/li> <li>Command Injection - http://cwe.mitre.org/data/definitions/77.html<\/li> <li>REST API Security Guidelines - https://dzone.com/articles/top-5-rest-api-security-guidelines<\/li> <li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html<\/li> <li>OWASP Input Validation Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":["OWASP A1","OWASP A3","[PCI DSS 3.0] 6.5.7","[PCI DSS 3.2] 6.5.1","OWASP - OTG-INPVAL-001","OWASP - OTG-INPVAL-002","OWASP OTG-INPVAL-013","FX Top 10 - API Vulnerability","INPUT VALIDATION","NON-INTRUSIVE"]}},{"help":{"text":"<ul> <li>Use an \"accept known good\" input validation strategy. Reject input not strictly conforming to specifications<\/li> <li>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules<\/li> <li>Do not rely exclusively on looking for malicious or malformed inputs <\/li> <\/ul>"},"id":"Linux_Command_Injection_Filter","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Stored Linux Injection <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong> <br> <br> <strong class=\"text-danger\">Overview: <\/strong> Stored Linux Injection is an attack in which the attacker is able to execute OS commands on the hosting server via vulnerable application. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. <br> <br> <strong class=\"text-danger\">Severity: <\/strong> Command Injection is classified under the category of \u201cInjection Attacks\u201d by OWASP. \u201cInjection Attacks\u201d is ranked at 8th position in 2019 OWASP API Top 10 <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong> and consistently rated at Top 1 Category of Attack by OWASP in years 2010, 2013 and 2017 <strong class=\"text-danger\"><sup>( 3 )<\/sup><\/strong>. Command Injection is rated at 11th position in the CWE / SANS Top 25 <strong class=\"text-danger\"><sup>( 4 )<\/sup><\/strong>.<br> <br> <strong class=\"text-danger\">Vulnerability Impact: <\/strong> Command injection is treated under the \u201cAttack\u201d category, in which the attacker extends the default functionality of the application, which executes system commands. <br> <br><ul> <li>Upload of malicious program or even obtain password<\/li> <li>Fully compromise the hosting application<\/li> <li>Can compromise other parts of hosting infrastructure exploiting trust relationship<\/li> <\/ul> <strong class=\"text-danger\">Exploitation: <\/strong> Command Injection vulnerabilities typically occur when<br> <br><ul> <li>Data enters the application from an untrusted source.<\/li> <li>The data is part of a string that is executed as a command by the application.<\/li> <li>By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.<\/li> <\/ul> <strong class=\"text-danger\">Remediation: <\/strong> Strong input validation must be performed for user supplied input <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>. Also follow the input validation cheat sheet from OWASP <br> <br><ul> <li>Use an \"accept known good\" input validation strategy. Reject input not strictly conforming to specifications<\/li> <li>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules<\/li> <li>Do not rely exclusively on looking for malicious or malformed inputs <\/li> <\/ul> <strong class=\"text-danger\">References: <\/strong><br> <ol> <li>OS Command Injection - https://www.owasp.org/index.php/Command_Injection<\/li> <li>OWASP API Security Project - https://www.owasp.org/index.php/OWASP_API_Security_Project<\/li> <li>OWASP Top 10 \u2013 2017 \u2013 A1 Injection - https://www.owasp.org/index.php/Top_10-2017_A1-Injection<\/li> <li>CWE \u2013 SANS \u2013 TOP 25 - http://cwe.mitre.org/top25/<\/li> <li>Command Injection - http://cwe.mitre.org/data/definitions/77.html<\/li> <li>REST API Security Guidelines - https://dzone.com/articles/top-5-rest-api-security-guidelines<\/li> <li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html<\/li> <li>OWASP Input Validation Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":["OWASP A1","OWASP A3","[PCI DSS 3.0] 6.5.7","[PCI DSS 3.2] 6.5.1","OWASP - OTG-INPVAL-001","OWASP - OTG-INPVAL-002","OWASP OTG-INPVAL-013","FX Top 10 - API Vulnerability","INPUT VALIDATION","NON-INTRUSIVE"]}},{"help":{"text":"<strong class=\"text-danger\">Remediation:  <\/strong> Based on the business need of the company, the following RateLimiting techniques may be employed. <strong class=\"text-danger\"><sup><\/sup><\/strong> <br>\n<ul>\n<li>User Rate Limiting: Associating the number of user requests made either from their API Key or IP address.<\/li>\n<li>Geographic Rate Limiting: Rate limits can be set for particular regions and particular time periods.<\/li>\n<li>Server Rate Limiting: Rate limits can be set on server level basis to ensure servers handle certain aspects of application. <\/li>\n<\/ul>"},"id":"Ratelimit_Unauthenticated","fullDescription":{"text":"\n<strong class=\"text-danger\"> Name: RateLimit Unauthenticated<\/strong> <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Overview: <\/strong> Quite often, APIs do not impose any restrictions on the size or number of resources that can be requested by the client/user. Not only can this impact the API server performance, leading to Denial of Service (DoS), but also leaves the door open to authentication flaws such as brute force. <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\nThis category is to check APIs that are open and impose no authentication restrictions. <br>\n<br>\n<strong class=\"text-danger\">Severity: <\/strong> Lack of Resources and Rate Limiting is ranked at 4th position in OWASP API Security Top 10 2019<strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact:  <\/strong> Not having RateLimit in place, a malicious user can repeatedly farm APIs leading to following actions which can be detrimental to security posture of the company. <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong><br>\n<br>\n<ul>\n<li>To perform Brute Force Attacks<\/li>\n<li>Can strain and drain server resources leading to DoS and DDoS attack<\/li>\n<li>Can perform Web-Scraping techniques to steal confidential data<\/li>\n<\/ul>\n<strong class=\"text-danger\">Remediation:  <\/strong> Based on the business need of the company, the following RateLimiting techniques may be employed. <strong class=\"text-danger\"><sup><\/sup><\/strong> <br>\n<ul>\n<li>User Rate Limiting: Associating the number of user requests made either from their API Key or IP address.<\/li>\n<li>Geographic Rate Limiting: Rate limits can be set for particular regions and particular time periods.<\/li>\n<li>Server Rate Limiting: Rate limits can be set on server level basis to ensure servers handle certain aspects of application. <\/li>\n<\/ul>\n<strong class=\"text-danger\">References: <\/strong><br>\n<ol>\n<li>https://owasp.org/www-project-api-security/<\/li>\n<li>https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html<\/li>\n<li>https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html<\/li>\n<\/ol>\n<br>\n"},"properties":{"security-severity":"6.5","problem.severity":"error","tags":[]}},{"help":{"text":"<ul> <li>Use of Prepared Statements \t\t\t<\/li> <li>Use of Stored Procedures\t\t\t<\/li> <li>White list input validation\t\t\t<\/li> <li>Escaping all user supplied input \t<\/li> <li>Enforcing Least Privilege \t\t\t<\/li> <\/ul>"},"id":"SQL_Injection_Timebound","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> SQL Injection <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Overview:<\/strong> SQL Injection is an Attack. It is executed by insertion or \u201cInjection\u201d of either partial or complete SQL query via query parameters, request body parameters, path parameters and passed to the application server/database.<br> <br> <strong class=\"text-danger\">Severity:<\/strong> SQL Injection is classified under the category of \u201cInjection Attacks\u201d by OWASP. \u201cInjection Attacks\u201d is consistently rated at Top 1 Category of Attack by OWASP in years 2010, 2013 and 2017 <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong>. SQL Injection is rated top 1 in the CWE / SANS Top 25 <strong class=\"text-danger\"><sup>( 3 ) ( 4 )<\/sup><\/strong>. <br> <br> <strong class=\"text-danger\">Vulnerability Impact:<\/strong> A Successful SQL Injection attack <br> <br><ul> <li>Can read sensitive data from the database<\/li> <li>Can modify the database data thru Insert / Update / Delete statements<\/li> <li>Can execute administrative operations on the database<\/li> <li>Can recover the content of the given file existing on the database<\/li> <li>Can write files into the file system<\/li> <li>Can issue commands to the operating System<\/li> <\/ul> <strong class=\"text-danger\">Exploitation:<\/strong> A successful SQL Injection attack is possible when the attacker crafts a syntactically Correct SQL Query. If an error is thrown back by the API by incorrect query, it will become much easier for the attacker to reconstruct the logic of the original query. If error is hidden, the attacker may have to reverse engineer for an exploitation. It might happen because of the following<br> <br><ul> <li>User supplied data is NOT validated, filtered or sanitized by the application<\/li> <li>Dynamic queries or non-parameterized calls without context-aware escaping<\/li> <\/ul> <strong class=\"text-danger\"> Remediation: <\/strong> A successful SQL Injection attack may possibly be avoided by Secure Coding Practices as outlined by OWASP SQL injection Prevention Cheat Sheet <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>. The following are some of the techniques for remediating SQL Injection attacks. <br> <br><ul> <li>Use of Prepared Statements \t\t\t<\/li> <li>Use of Stored Procedures\t\t\t<\/li> <li>White list input validation\t\t\t<\/li> <li>Escaping all user supplied input \t<\/li> <li>Enforcing Least Privilege \t\t\t<\/li> <\/ul> <strong class=\"text-danger\"> References:<\/strong><br> <ol> <li>SQL Injection: https://www.owasp.org/index.php/SQL_Injection<\/li> <li>OWASP Top 10 \u2013 2017 \u2013 A1 Injection - https://www.owasp.org/index.php/Top_10-2017_A1-Injection<\/li> <li>CWE \u2013 SANS \u2013 TOP 25 - http://cwe.mitre.org/top25/<\/li> <li>Common Weakness Enumeration \u2013 SQL Injection - http://cwe.mitre.org/data/definitions/89.html<\/li> <li>OWASP SQL Injection Prevention Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"9.6","problem.severity":"error","tags":["OWASP A1","[PCI DSS 3.0] 6.5.1","OWASP - OTG-INPVAL-005","FX Top 10 - API Vulnerability","Intrusive"]}},{"help":{"text":"<ul>\n<li>Make sure logs are backed up and Synched to another server<\/li>\n<li>Sensitive actions should be logged as this is valuable when investigating a hack afterwards<\/li>\n<li>A system should be in place to alert if a specific warning has been triggered or if a specific warning threshold has been reached so that proper action can be taken.<\/li>\n<\/ul>"},"id":"Insufficient_Monitoring","fullDescription":{"text":"<strong class=\"text-danger\">Name:  <\/strong>Insufficient Monitoring <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Overview:  <\/strong>Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident. Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.<br>\n<br>When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it. <br>\n<br>And when not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds. <br>\n<br>\n<strong class=\"text-danger\">Severity:  <\/strong>Insufficient_Logging and Monitoring is rated at 10th position in both OWASP 2019 API Security Top 10 and also OWASP 2017 Security Top 10 <strong class=\"text-danger\"><sup>( 1 ) ( 2 )<\/sup><\/strong>.<br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact:  <\/strong>Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems to tamper with, extract, or destroy data. <br>\n<br>Most breach studies demonstrate the time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.<br>\n<br>\n<strong class=\"text-danger\">Exploitation:  <\/strong>When a security breach is not discovered in time, the attackers have time to escalate the attack further into the system. It also means they can use the stolen data for malicious purposes for a longer time.<br>\n<br>\n<strong class=\"text-danger\">Remediation:  <\/strong>The following good practices can be adopted to remediate <strong class=\"text-danger\"><sup>( 3 )<\/sup><\/strong><br>\n<br><ul>\n<li>Make sure logs are backed up and Synched to another server<\/li>\n<li>Sensitive actions should be logged as this is valuable when investigating a hack afterwards<\/li>\n<li>A system should be in place to alert if a specific warning has been triggered or if a specific warning threshold has been reached so that proper action can be taken.<\/li>\n<\/ul>\n<strong class=\"text-danger\">References:  <\/strong><br>\n<ol>\n<li>Insufficient Logging & Monitoring - https://www.owasp.org/index.php/Top_10-2017_A10-Insufficient_Logging%26Monitoring<\/li>\n<li>OWASP API Security Project - https://www.owasp.org/index.php/OWASP_API_Security_Project<\/li>\n<li>Logging Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.4","problem.severity":"error","tags":[]}},{"help":{"text":"<ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul>"},"id":"ABAC_Level1","fullDescription":{"text":"<b><font color=\"#ef5350\">Name: <\/font><\/b> Attribute Based Access Control 1 (ABAC) <b><font color=\"#ef5350\"><sup>( 1\n    )<\/sup><\/font><\/b><br> <br> <b><font color=\"#ef5350\">Overview: <\/font><\/b> Access Control (or Authorization) is\nthe process of granting or denying specific requests from a user, program, or process. Access control also involves the\nact of granting and revoking those privileges. Attribute Based Access Control (ABAC) will grant or deny user requests\nbased on arbitrary attributes of the user and arbitrary attributes of the object, and environment conditions that may be\nglobally recognized and more relevant to the policies at hand. <br> <br>'Attribute-based-access-control 1' identifies\ntop-level/non-dependent resource/data/record vulnerabilities. Looks for private user/account data being illegally read,\nwritten, updated, deleted or operated by other users or tenants or accounts. <br> <br>This scanner requires a\nprivate-account/user to create private data/resources e.g. UserA. And it also requires other users who shouldn't have\nany access to UserA's data like UserB, UserC, & UserD based on your App multi-tenancy model. e.g. UserA can be a user\nfrom tenant/org-a and UserB can be a user in tenant-b and UserC can be a user in tenant-c with admin\nprivileges.<br /><br />APIs tend to expose endpoints that handle object identifiers, creating a wide attack surface\nLevel Access Control issue. Object-level authorization checks should be considered in every function that accesses a\ndata source using input from the user.<br> <br> <b><font color=\"#ef5350\">Severity: <\/font><\/b> OWASP 2019 API Top 10\nranks ABAC vulnerabilities at Top 1 position and is named Broken Object Level Authorization.\n<b><font color=\"#ef5350\"><sup>( 2 )<\/sup><\/font><\/b> <br> <br> <b><font color=\"#ef5350\">Vulnerability Impact: <\/font><\/b>\nWith flawed or broken ABAC security control policy in place, The following are some of the consequences. <br> <br>\n<ul>\n<li>Unauthorized access can result in data disclosure to unauthorized parties, data loss, or data manipulation.<\/li>\n<li>Unauthorized access to objects can also lead to full account takeover.<\/li>\n<\/ul> <b><font color=\"#ef5350\">Exploitation: <\/font><\/b> Attackers can exploit API endpoints that are vulnerable to\nbroken object level authorization by manipulating the ID of an object that is sent within the request. This may lead to\nunauthorized access to sensitive data. This issue is extremely common in API-based applications because the server\ncomponent usually does not fully track the client\u2019s state, and instead, relies more on parameters like object IDs, that\nare sent from the client to decide which objects to access. <br> <br> <b><font color=\"#ef5350\">Remediation: <\/font><\/b>\nThe following techniques may be checked for ensuring RBAC is in place <b><font color=\"#ef5350\"><sup>( 2 ) ( 3 ) ( 4\n    )<\/sup><\/font><\/b>. <br> <br>\n<ul>\n<li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li>\n<li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session\n    object when accessing a database record by the record ID.<\/li>\n<li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the\n    record in every function that uses an client input to access a record in the database.<\/li>\n<li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li>\n<li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li>\n<\/ul> <b><font color=\"#ef5350\">References: <\/font><\/b><br>\n<ol>\n<li>Enforce Access Controls -\n    https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html<\/li>\n<li>OWASP 2019 API Top 10 -\n    https://github.com/OWASP/API-Security/raw/master/2019/en/dist/owasp-api-security-top-10.pdf<\/li>\n<li>OWASP Access Control Cheat Sheet -\n    https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html<\/li>\n<li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\n<\/li>\n<\/ol> <br>"},"properties":{"security-severity":"8.1","problem.severity":"error","tags":["FX Top 10 - API Vulnerability","Data_Access_Control"]}},{"help":{"text":"<ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul>"},"id":"ABAC_Level2","fullDescription":{"text":"<b>\n    <font color=\"#ef5350\">Name: <\/font><\/b> Attribute Based Access Control 2 (ABAC 2) <b>\n            <font color=\"#ef5350\"><sup>( 1 )<\/sup><\/font><\/b><br> <br> <b>\n                    <font color=\"#ef5350\">Overview: <\/font><\/b> Access Control (or Authorization) is the process of\n                        granting or denying specific requests from a user, program, or process. Access control also\n                        involves the act of granting and revoking those privileges. Attribute Based Access Control\n                        (ABAC) will grant or deny user requests based on arbitrary attributes of the user and arbitrary\n                        attributes of the object, and environment conditions that may be globally recognized and more\n                        relevant to the policies at hand. <br> <br>'Attribute-based-access-control 2' identifies all\n                        types of top-level/non-dependent resource/data/record vulnerabilities. e.g. Accounts of type\n                        Savings, Checking, & Investment etc. making sure there are no vulnerabilities across all of\n                        these types of resources and not just one. ABAC scanning identifies data/resource leak/attack\n                        vulnerabilities. Looks for private user/account data being illegally read, written, updated,\n                        deleted or operated by other users or tenants or accounts. <br> <br>This scanner requires a\n                        private-account/user to create private data/resources e.g. UserA. And it also requires other\n                        users who shouldn't have any access to UserA's data like UserB, UserC, & UserD based on your App\n                        multi-tenancy model. e.g. UserA can be a user from tenant/org-a and UserB can be a user in\n                        tenant-b and UserC can be a user in tenant-c with admin privileges.<br> <br>APIs tend to expose\n                        endpoints that handle object identifiers, creating a wide attack surface Level Access Control\n                        issue. Object-level authorization checks should be considered in every function that accesses a\n                        data source using input from the user. <br> <br> <b>\n                            <font color=\"#ef5350\">Severity: <\/font><\/b> OWASP 2019 API Top 10 ranks ABAC vulnerabilities\n                                at Top 1 position and is named Broken Object Level Authorization. <b>\n                                    <font color=\"#ef5350\"><sup>( 2 )<\/sup><\/font><\/b> <br> <br> <b>\n                                            <font color=\"#ef5350\">Vulnerability Impact: <\/font><\/b> With flawed or broken\n                                                ABAC security control policy in place, The following are some of the\n                                                consequences. <br> <br>\n                                                <ul>\n                                                    <li>Unauthorized access can result in data disclosure to\n                                                        unauthorized parties, data loss, or data manipulation.<\/li>\n                                                    <li>Unauthorized access to objects can also lead to full account\n                                                        takeover.<\/li>\n                                                <\/ul> <b>\n                                                    <font color=\"#ef5350\">Exploitation: <\/font><\/b> Attackers can exploit\n                                                        API endpoints that are vulnerable to broken object level\n                                                        authorization by manipulating the ID of an object that is sent\n                                                        within the request. This may lead to unauthorized access to\n                                                        sensitive data. This issue is extremely common in API-based\n                                                        applications because the server component usually does not fully\n                                                        track the client\u2019s state, and instead, relies more on parameters\n                                                        like object IDs, that are sent from the client to decide which\n                                                        objects to access. <br> <br> <b>\n                                                            <font color=\"#ef5350\">Remediation: <\/font><\/b> The following\n                                                                techniques may be checked for ensuring RBAC is in place\n                                                                <b>\n                                                                    <font color=\"#ef5350\"><sup>( 2 ) ( 3 ) ( 4\n                                                                            )<\/sup><\/font><\/b>. <br> <br>\n                                                                        <ul>\n                                                                            <li>Implement a proper authorization\n                                                                                mechanism that relies on the user\n                                                                                policies and hierarchy.<\/li>\n                                                                            <li>Prefer not to use an ID that has been\n                                                                                sent from the client, but instead use an\n                                                                                ID that is stored in the session object\n                                                                                when accessing a database record by the\n                                                                                record ID.<\/li>\n                                                                            <li>Use an authorization mechanism to check\n                                                                                if the logged-in user has access to\n                                                                                perform the requested action on the\n                                                                                record in every function that uses an\n                                                                                client input to access a record in the\n                                                                                database.<\/li>\n                                                                            <li>Prefer to use random and unpredictable\n                                                                                values as GUIDs for records\u2019 IDs.<\/li>\n                                                                            <li>Write tests to evaluate the\n                                                                                authorization mechanism. Do not deploy\n                                                                                vulnerable changes that break the tests.\n                                                                            <\/li>\n                                                                        <\/ul> <b>\n                                                                            <font color=\"#ef5350\">References:\n                                                                                <\/font><\/b><br>\n                                                                                <ol>\n                                                                                    <li>Enforce Access Controls -\n                                                                                        https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html\n                                                                                    <\/li>\n                                                                                    <li>OWASP 2019 API Top 10 -\n                                                                                        https://github.com/OWASP/API-Security/raw/master/2019/en/dist/owasp-api-security-top-10.pdf\n                                                                                    <\/li>\n                                                                                    <li>OWASP Access Control Cheat Sheet\n                                                                                        -\n                                                                                        https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html\n                                                                                    <\/li>\n                                                                                    <li>OWASP REST Security Cheat Sheet\n                                                                                        -\n                                                                                        https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\n                                                                                    <\/li>\n                                                                                <\/ol> <br>"},"properties":{"security-severity":"8.1","problem.severity":"error","tags":["FX Top 10 - API Vulnerability","Data_Access_Control"]}},{"help":{"text":"<ul> <li>Use of Prepared Statements \t\t\t<\/li> <li>Use of Stored Procedures\t\t\t<\/li> <li>White list input validation\t\t\t<\/li> <li>Escaping all user supplied input \t<\/li> <li>Enforcing Least Privilege \t\t\t<\/li> <\/ul>"},"id":"NoSQL_Injection_Filter","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Stored NoSQL Injection <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Overview:<\/strong> SQL Injection is an Attack. It is executed by insertion or \u201cInjection\u201d of either partial or complete SQL query via query parameters, request body parameters, path parameters and passed to the application server/database.<br> <br>NoSQL databases are vulnerable to similar attacks like that of SQL. API endpoints allow much bigger surface area then exposed by the web/mobile forms, resulting in performing much deeper and comprehensive attacks by injecting across all resource properties, query-params, path-params, & headers.<br> <br>Injection flaws, such as SQL, NoSQL, Command Injection, etc. occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's malicious data can trick the interpreter into executing unintended commands or accessing data without proper authorization. <br> <br> <strong class=\"text-danger\">Severity:<\/strong> SQL Injection is classified under the category of \u201cInjection Attacks\u201d by OWASP. \u201cInjection Attacks\u201d is consistently rated at Top 1 Category of Attack by OWASP in years 2010, 2013 and 2017 <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong>. SQL Injection is rated top 1 in the CWE / SANS Top 25 <strong class=\"text-danger\"><sup>( 3 ) ( 4 )<\/sup><\/strong>. <br> <br> <strong class=\"text-danger\">Vulnerability Impact:<\/strong> A Successful SQL Injection attack <br> <br><ul> <li>Can read sensitive data from the database<\/li> <li>Can modify the database data thru Insert / Update / Delete statements<\/li> <li>Can execute administrative operations on the database<\/li> <li>Can recover the content of the given file existing on the database<\/li> <li>Can write files into the file system<\/li> <li>Can issue commands to the operating System<\/li> <\/ul> <strong class=\"text-danger\">Exploitation:<\/strong> A successful SQL Injection attack is possible when the attacker crafts a syntactically Correct SQL Query. If an error is thrown back by the API by incorrect query, it will become much easier for the attacker to reconstruct the logic of the original query. If error is hidden, the attacker may have to reverse engineer for an exploitation. It might happen because of the following<br> <br><ul> <li>User supplied data is NOT validated, filtered or sanitized by the application<\/li> <li>Dynamic queries or non-parameterized calls without context-aware escaping<\/li> <\/ul> <strong class=\"text-danger\"> Remediation: <\/strong> A successful SQL Injection attack may possibly be avoided by Secure Coding Practices as outlined by OWASP SQL injection Prevention Cheat Sheet <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>. The following are some of the techniques for remediating SQL Injection attacks. <br> <br><ul> <li>Use of Prepared Statements \t\t\t<\/li> <li>Use of Stored Procedures\t\t\t<\/li> <li>White list input validation\t\t\t<\/li> <li>Escaping all user supplied input \t<\/li> <li>Enforcing Least Privilege \t\t\t<\/li> <\/ul> <strong class=\"text-danger\"> References:<\/strong><br> <ol> <li>SQL Injection: https://www.owasp.org/index.php/SQL_Injection<\/li> <li>OWASP Top 10 \u2013 2017 \u2013 A1 Injection - https://www.owasp.org/index.php/Top_10-2017_A1-Injection<\/li> <li>CWE \u2013 SANS \u2013 TOP 25 - http://cwe.mitre.org/top25/<\/li> <li>Common Weakness Enumeration \u2013 SQL Injection - http://cwe.mitre.org/data/definitions/89.html<\/li> <li>OWASP SQL Injection Prevention Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":["OWASP A1","[PCI DSS 3.0] 6.5.1","OWASP - OTG-INPVAL-005","FX Top 10 - API Vulnerability","Injection"]}},{"help":{"text":"<ul>\n<li>Make sure logs are backed up and Synched to another server.<\/li>\n<li>Sensitive actions should be logged as this is valuable when investigating a hack afterwards.<\/li>\n<li>A system should be in place to alert if a specific warning has been triggered or if a specific warning threshold has been reached so that proper action can be taken.<\/li>\n<\/ul>"},"id":"Insufficient_Logging","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> Insufficient Logging <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br><strong class=\"text-danger\">Overview:  <\/strong>When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it. And when not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.<br>\n<br>\n<strong class=\"text-danger\">Severity:  <\/strong>Insufficient Logging and Monitoring is rated at 10th position in both OWASP 2019 API Security Top 10 and also OWASP 2017 Security Top 10 <strong class=\"text-danger\"><sup>( 2 ) ( 3 )<\/sup><\/strong>.<br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact:  <\/strong>Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems to tamper with, extract, or destroy data.<br>\n<br>Most breach studies demonstrate the time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.<br>\n<br>\n<strong class=\"text-danger\">Exploitation:  <\/strong>When a security breach is not discovered in time, the attackers have time to escalate the attack further into the system. It also means they can use the stolen data for malicious purposes for a longer time.<br>\n<br>\n<strong class=\"text-danger\">Remediation:  <\/strong>The following good practices can be adopted to remediate <strong class=\"text-danger\"><sup>( 4 )<\/sup><\/strong> <br>\n<br><ul>\n<li>Make sure logs are backed up and Synched to another server.<\/li>\n<li>Sensitive actions should be logged as this is valuable when investigating a hack afterwards.<\/li>\n<li>A system should be in place to alert if a specific warning has been triggered or if a specific warning threshold has been reached so that proper action can be taken.<\/li>\n<\/ul>\n<strong class=\"text-danger\">References:  <\/strong><br>\n<ol>\n<li>Insufficient Logging - https://cwe.mitre.org/data/definitions/778.html<\/li>\n<li>Insufficient Logging & Monitoring - https://www.owasp.org/index.php/Top_10-2017_A10-Insufficient_Logging%26Monitoring<\/li>\n<li>OWASP API Security Project - https://www.owasp.org/index.php/OWASP_API_Security_Project<\/li>\n<li>Logging Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.4","problem.severity":"error","tags":[]}},{"help":{"text":"More Details"},"id":"Incremental_Ids","fullDescription":{"text":"Incremental Ids scanning checks if the Auto generated IDs associated with the resources in sequential. Resources with Sequential IDs are vulnerable since they are easy to guess."},"properties":{"security-severity":"6.8","problem.severity":"error","tags":["Incremental Ids"]}},{"help":{"text":"<ul>\n<li>The Error logs must record \"when, where, who and what\" for each error event.<\/li>\n<li>Make sure logs are backed up and Synched to another server.<\/li>\n<li>Sensitive actions should be logged as this is valuable when investigating a hack afterwards.<\/li>\n<li>A system should be in place to alert if a specific warning has been triggered or if a specific warning threshold has been reached so that proper action can be taken.<\/li>\n<\/ul>"},"id":"Error_Logging","fullDescription":{"text":"<strong class=\"text-danger\"> Name: <\/strong>Error Logging<strong class=\"text-danger\"><sup>( 1 )<\/sup> <sup>( 2 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Overview: <\/strong> Logging is an important asset of the security of an application architecture, since it can be used to detect flaws in applications (users constantly trying to retrieve a file that does not really exist) as well as sustained attacks from rogue users. Logs are typically properly generated by web and other server software. It is not common to find applications that properly log their actions to a log and, when they do, the main intention of the application logs is to produce debugging output that could be used by the programmer to analyze a particular error.<br>\n<br>\nEach log entry needs to include sufficient information for the intended subsequent monitoring and analysis. It could be full content data, but is more likely to be an extract or just summary properties.<br>\n<br>\nError logs could provide insights on hacking attempts, as most hacking attempts on systems and servers result in error or have a high probability of being captured in error logs as the hackers attempt to compromise the system.<br>\n<br>\nThe other aspect of Error Loggins is Error handling which is a part of the overall security of an application. An attack always begins with a Reconnaissance phase in which the attacker will try to gather as much technical information (often name and version properties) as possible about the target, such as the application server, frameworks, libraries, etc.<br>\n<br>\nUnhandled errors can assist an attacker in this initial phase, which is very important for the rest of the attack.<br>\n<br>\n<strong class=\"text-danger\">Severity:  <\/strong>Error Logging is part of Logging. And as such Insufficient Logging and Monitoring is rated at 10th position in both OWASP 2019 API Security Top 10 and also OWASP 2017 Security Top 10 <strong class=\"text-danger\"><sup>( 3 ) ( 4 )<\/sup><\/strong>.<br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact:  <\/strong>If Errors are not properly logged, and Logs are not properly monitored, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems to tamper with, extract, or destroy data.<br>\n<br>Most breach studies demonstrate the time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.<br>\n<br>\n<strong class=\"text-danger\">Exploitation:  <\/strong>When a security breach is not discovered in time, the attackers have time to escalate the attack further into the system. It also means they can use the stolen data for malicious purposes for a longer time.<br>\n<br>\n<strong class=\"text-danger\">Remediation:  <\/strong>The following good practices can be adopted to remediate <strong class=\"text-danger\"><sup>( 4 )<\/sup><\/strong> <br>\n<br><ul>\n<li>The Error logs must record \"when, where, who and what\" for each error event.<\/li>\n<li>Make sure logs are backed up and Synched to another server.<\/li>\n<li>Sensitive actions should be logged as this is valuable when investigating a hack afterwards.<\/li>\n<li>A system should be in place to alert if a specific warning has been triggered or if a specific warning threshold has been reached so that proper action can be taken.<\/li>\n<\/ul>\n<strong class=\"text-danger\">References: <\/strong><br>\n<ol>\n<li>https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html<\/li>\n<li>https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html<\/li>\n<li>Insufficient Logging & Monitoring - https://www.owasp.org/index.php/Top_10-2017_A10-Insufficient_Logging%26Monitoring<\/li>\n<li>OWASP API Security Project - https://www.owasp.org/index.php/OWASP_API_Security_Project<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.4","problem.severity":"error","tags":[]}},{"help":{"text":"More Details"},"id":"Invalid_Data","fullDescription":{"text":"Invalid Data Type is a negative test case to check how APIs behave when a data type is sent other than the one API is expecting."},"properties":{"security-severity":"6.0","problem.severity":"error","tags":["OWASP - OTG-BUSLOGIC-001","Fuzz"]}},{"help":{"text":"More Details"},"id":"SLA","fullDescription":{"text":"Performance SLA scanning allows endpoint performance monitoring from one or more regions based on your customer usage. Keep historical data and identify bottlenecks before they become much worse."},"properties":{"security-severity":"6.0","problem.severity":"error","tags":["SLA"]}},{"help":{"text":"More Details"},"id":"SimpleGET","fullDescription":{"text":"Simple GET is a suite to test the plain GET APIs with no query or path params."},"properties":{"security-severity":"6.0","problem.severity":"error","tags":[" OWASP - OTG-CONFIG-006","Fuzz"]}},{"help":{"text":"More Details"},"id":"Null_Value","fullDescription":{"text":"Null value is a negative test case to check how APIs behave when Null values are sent in a data type that API is not expecting."},"properties":{"security-severity":"6.0","problem.severity":"error","tags":["OWASP - OTG-BUSLOGIC-001","Fuzz"]}},{"help":{"text":"More Details"},"id":"Negative_Number","fullDescription":{"text":"Negative Number is a negative test case for paramertes of numeric data type to check how APIs behave when negative values are sent."},"properties":{"security-severity":"6.0","problem.severity":"error","tags":["OWASP - OTG-BUSLOGIC-001","Fuzz"]}},{"help":{"text":"<ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul>"},"id":"ABAC_Level4","fullDescription":{"text":"<b>\n    <font color=\"#ef5350\">Name: <\/font><\/b> Attribute Based Access Control 4 (ABAC 4) <b>\n            <font color=\"#ef5350\"><sup>( 1 )<\/sup><\/font><\/b><br> <br> <b>\n                    <font color=\"#ef5350\">Overview: <\/font><\/b> Access Control (or Authorization) is the process of\n                        granting or denying specific requests from a user, program, or process. Access control also\n                        involves the act of granting and revoking those privileges. Attribute Based Access Control\n                        (ABAC) will grant or deny user requests based on arbitrary attributes of the user and arbitrary\n                        attributes of the object, and environment conditions that may be globally recognized and more\n                        relevant to the policies at hand. <br> <br>'Attribute-based-access-control 4' identifies\n                        top-level/non-dependent resource/data/record vulnerabilities. ABAC scanning identifies\n                        data/resource leak/attack vulnerabilities. Looks for private user/account data being legally\n                        read, written, updated, deleted or operated by valid accounts or privileged accounts within the\n                        same tenant. <br> <br>This scanner requires a private-account/user to create private\n                        data/resources e.g. UserA. And it also requires other users who should have access to UserA's\n                        data like UserA, & UserB, based on your App multi-tenancy model. e.g. UserA can be a user from\n                        tenant/org-a and UserB can be a user in the same tenant-a but with admin/write/same/higher\n                        privileges.<br> <br />APIs tend to expose endpoints that handle object identifiers, creating a\n                        wide attack surface Level Access Control issue. Object-level authorization checks should be\n                        considered in every function that accesses a data source using input from the user.<br> <br> <b>\n                            <font color=\"#ef5350\">Severity: <\/font><\/b> OWASP 2019 API Top 10 ranks ABAC vulnerabilities\n                                at Top 1 position and is named Broken Object Level Authorization. <b>\n                                    <font color=\"#ef5350\"><sup>( 2 )<\/sup><\/font><\/b> <br> <br> <b>\n                                            <font color=\"#ef5350\">Vulnerability Impact: <\/font><\/b> With flawed or broken\n                                                ABAC security control policy in place, The following are some of the\n                                                consequences. <br> <br>\n                                                <ul>\n                                                    <li>Unauthorized access can result in data disclosure to\n                                                        unauthorized parties, data loss, or data manipulation.<\/li>\n                                                    <li>Unauthorized access to objects can also lead to full account\n                                                        takeover.<\/li>\n                                                <\/ul> <b>\n                                                    <font color=\"#ef5350\">Exploitation: <\/font><\/b> Attackers can exploit\n                                                        API endpoints that are vulnerable to broken object level\n                                                        authorization by manipulating the ID of an object that is sent\n                                                        within the request. This may lead to unauthorized access to\n                                                        sensitive data. This issue is extremely common in API-based\n                                                        applications because the server component usually does not fully\n                                                        track the client\u2019s state, and instead, relies more on parameters\n                                                        like object IDs, that are sent from the client to decide which\n                                                        objects to access. <br> <br> <b>\n                                                            <font color=\"#ef5350\">Remediation: <\/font><\/b> The following\n                                                                techniques may be checked for ensuring RBAC is in place\n                                                                <b>\n                                                                    <font color=\"#ef5350\"><sup>( 2 ) ( 3 ) ( 4\n                                                                            )<\/sup><\/font><\/b>. <br> <br>\n                                                                        <ul>\n                                                                            <li>Implement a proper authorization\n                                                                                mechanism that relies on the user\n                                                                                policies and hierarchy.<\/li>\n                                                                            <li>Prefer not to use an ID that has been\n                                                                                sent from the client, but instead use an\n                                                                                ID that is stored in the session object\n                                                                                when accessing a database record by the\n                                                                                record ID.<\/li>\n                                                                            <li>Use an authorization mechanism to check\n                                                                                if the logged-in user has access to\n                                                                                perform the requested action on the\n                                                                                record in every function that uses an\n                                                                                client input to access a record in the\n                                                                                database.<\/li>\n                                                                            <li>Prefer to use random and unpredictable\n                                                                                values as GUIDs for records\u2019 IDs.<\/li>\n                                                                            <li>Write tests to evaluate the\n                                                                                authorization mechanism. Do not deploy\n                                                                                vulnerable changes that break the tests.\n                                                                            <\/li>\n                                                                        <\/ul> <b>\n                                                                            <font color=\"#ef5350\">References:\n                                                                                <\/font><\/b><br>\n                                                                                <ol>\n                                                                                    <li>Enforce Access Controls -\n                                                                                        https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html\n                                                                                    <\/li>\n                                                                                    <li>OWASP 2019 API Top 10 -\n                                                                                        https://github.com/OWASP/API-Security/raw/master/2019/en/dist/owasp-api-security-top-10.pdf\n                                                                                    <\/li>\n                                                                                    <li>OWASP Access Control Cheat Sheet\n                                                                                        -\n                                                                                        https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html\n                                                                                    <\/li>\n                                                                                    <li>OWASP REST Security Cheat Sheet\n                                                                                        -\n                                                                                        https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\n                                                                                    <\/li>\n                                                                                <\/ol> <br>"},"properties":{"security-severity":"8.1","problem.severity":"error","tags":["FX Top 10 - API Vulnerability","Data_Access_Control"]}},{"help":{"text":"<ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul>"},"id":"ABAC_Level3","fullDescription":{"text":"<b><font color=\"#ef5350\">Name: <\/font><\/b> Attribute Based Access Control 3 (ABAC 3) <b><font color=\"#ef5350\"><sup>(\n        1 )<\/sup><\/font><\/b><br> <br> <b><font color=\"#ef5350\">Overview: <\/font><\/b> Access Control (or Authorization) is\nthe process of granting or denying specific requests from a user, program, or process. Access control also involves the\nact of granting and revoking those privileges. Attribute Based Access Control (ABAC) will grant or deny user requests\nbased on arbitrary attributes of the user and arbitrary attributes of the object, and environment conditions that may be\nglobally recognized and more relevant to the policies at hand. <br> <br>'Attribute-based-access-control 3' identifies\ndependent and nested resource/data/record vulnerabilities. e.g. vulnerabilities in tasks which is nested within a\nproject and the access-controls may only be applied at the project level. ABAC scanning identifies data/resource\nleak/attack vulnerabilities. Looks for private user/account data being illegally read, written, updated, deleted or\noperated by other users or tenants or accounts.<br> <br>This scanner requires a private-account/user to create private\ndata/resources e.g. UserA. And it also requires other users who shouldn't have any access to UserA's data like UserB,\nUserC, & UserD based on your App multi-tenancy model. e.g. UserA can be a user from tenant/org-a and UserB can be a user\nin tenant-b and UserC can be a user in tenant-c with admin privileges.<br /> <br />APIs tend to expose endpoints that\nhandle object identifiers, creating a wide attack surface Level Access Control issue. Object-level authorization checks\nshould be considered in every function that accesses a data source using input from the user.<br> <br> <b><font color=\"#ef5350\">Severity: <\/font><\/b> OWASP 2019 API Top 10 ranks ABAC vulnerabilities at Top 1 position and is\nnamed Broken Object Level Authorization. <b><font color=\"#ef5350\"><sup>( 2 )<\/sup><\/font><\/b> <br> <br> <b><font color=\"#ef5350\">Vulnerability Impact: <\/font><\/b> With flawed or broken ABAC security control policy in place, The\nfollowing are some of the consequences. <br> <br>\n<ul>\n    <li>Unauthorized access can result in data disclosure to unauthorized parties, data loss, or data manipulation.<\/li>\n    <li>Unauthorized access to objects can also lead to full account takeover.<\/li>\n<\/ul> <b><font color=\"#ef5350\">Exploitation: <\/font><\/b> Attackers can exploit API endpoints that are vulnerable to\nbroken object level authorization by manipulating the ID of an object that is sent within the request. This may lead to\nunauthorized access to sensitive data. This issue is extremely common in API-based applications because the server\ncomponent usually does not fully track the client\u2019s state, and instead, relies more on parameters like object IDs, that\nare sent from the client to decide which objects to access. <br> <br> <b><font color=\"#ef5350\">Remediation: <\/font><\/b>\nThe following techniques may be checked for ensuring RBAC is in place <b><font color=\"#ef5350\"><sup>( 2 ) ( 3 ) ( 4\n        )<\/sup><\/font><\/b>. <br> <br>\n<ul>\n    <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li>\n    <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session\n        object when accessing a database record by the record ID.<\/li>\n    <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the\n        record in every function that uses an client input to access a record in the database.<\/li>\n    <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li>\n    <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li>\n<\/ul> <b><font color=\"#ef5350\">References: <\/font><\/b><br>\n<ol>\n    <li>Enforce Access Controls -\n        https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html<\/li>\n    <li>OWASP 2019 API Top 10 -\n        https://github.com/OWASP/API-Security/raw/master/2019/en/dist/owasp-api-security-top-10.pdf<\/li>\n    <li>OWASP Access Control Cheat Sheet -\n        https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html<\/li>\n    <li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\n    <\/li>\n<\/ol> <br>"},"properties":{"security-severity":"8.1","problem.severity":"error","tags":["FX Top 10 - API Vulnerability","Data_Access_Control"]}},{"help":{"text":"<strong class=\"text-danger\">Remediation:  <\/strong> Based on the business need of the company, the following RateLimiting techniques may be employed. <strong class=\"text-danger\"><sup><\/sup><\/strong> <br>\n<ul>\n<li>User Rate Limiting: Associating the number of user requests made either from their API Key or IP address.<\/li>\n<li>Geographic Rate Limiting: Rate limits can be set for particular regions and particular time periods.<\/li>\n<li>Server Rate Limiting: Rate limits can be set on server level basis to ensure servers handle certain aspects of application. <\/li>\n<\/ul>"},"id":"Ratelimit_Authenticated","fullDescription":{"text":"<strong class=\"text-danger\"> Name: <\/strong> RateLimit Authenticated <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Overview: <\/strong> Quite often, APIs do not impose any restrictions on the size or number of resources that can be requested by the client/user. Not only can this impact the API server performance, leading to Denial of Service (DoS), but also leaves the door open to authentication flaws such as brute force. <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br>\n<br>\nThis category is to check APIs that are secured and require users to authenticate before accessing APIs. <br>\n<br>\n<strong class=\"text-danger\">Severity: <\/strong> Lack of Resources and Rate Limiting is ranked at 4th position in OWASP API Security Top 10 2019. <strong class=\"text-danger\"><sup> ( 1 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact:  <\/strong> Not having RateLimit in place, a malicious user can repeatedly farm APIs leading to following actions which can be detrimental to security posture of the company. <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong><br>\n<br>\n<ul>\n<li>To perform Brute Force Attacks<\/li>\n<li>Can strain and drain server resources leading to DoS and DDoS attack<\/li>\n<li>Can perform Web-Scraping techniques to steal confidential data<\/li>\n<\/ul>\n<strong class=\"text-danger\">Remediation:  <\/strong> Based on the business need of the company, the following RateLimiting techniques may be employed. <strong class=\"text-danger\"><sup><\/sup><\/strong> <br>\n<br>\n<ul>\n<li><b>User Rate Limiting: <\/b> Associating the number of user requests made either from their API Key or IP address.<\/li>\n<li><b>Geographic Rate Limiting:<\/b> Rate limits can be set for particular regions and particular time periods.<\/li>\n<li><b>Server Rate Limiting: <\/b>Rate limits can be set on server level basis to ensure servers handle certain aspects of application. <\/li>\n<\/ul>\n<strong class=\"text-danger\">References: <\/strong><br>\n<ol>\n<li>https://owasp.org/www-project-api-security/<\/li>\n<li>https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html<\/li>\n<li>https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.5","problem.severity":"error","tags":[]}},{"help":{"text":"<ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul>"},"id":"Hijack_Level1","fullDescription":{"text":"<b><font color=\"#ef5350\">Name: <\/font><\/b> Hijack (Level 1)<b><font color=\"#ef5350\"><sup>( 1 )<\/sup><\/font><\/b><br> <br> <b><font color=\"#ef5350\">Overview: <\/font><\/b> Access Control (or Authorization) is the process of granting or denying specific requests from a user, program, or process. Access control also involves the act of granting and revoking those privileges. Attribute Based Access Control (ABAC) will grant or deny user requests based on arbitrary attributes of the user and arbitrary attributes of the object, and environment conditions that may be globally recognized and more relevant to the policies at hand. <br> <br>Hijack (Level1) identifies dependent and nested resource/data/record hijacking vulnerabilities. e.g. vulnerabilities in tasks which is nested within a project and the access-controls may only be applied at the project level. Hijack (Level 1) scanning identifies data/resource leak/attack vulnerabilities. <br /> <br>Looks for private user/account data being illegally read, written, updated, deleted or operated by other users or tenants or accounts. <br> <br>This scanner requires a private-account/user to create private data/resources e.g. UserA. And it also requires other users who shouldn't have any access to UserA's data like UserB, UserC, & UserD based on your App multi-tenancy model. e.g. UserA can be a user from tenant/org-a and UserB can be a user in tenant-b and UserC can be a user in tenant-c with admin privileges.<br/><br/>Binding client provided data (e.g., JSON) to data models, without proper properties filtering based on a whitelist, usually lead to Mass Assignment. Either guessing objects properties, exploring other API endpoints, reading the documentation, or providing additional object properties in request payloads, allows attackers to modify object properties they are not supposed to.<br> <br> <b><font color=\"#ef5350\">Severity: <\/font><\/b> OWASP 2019 API Top 10 ranks ABAC vulnerabilities at Top 1 position and is named Broken Object Level Authorization. <b><font color=\"#ef5350\"><sup>( 2 )<\/sup><\/font><\/b> <br> <br> <b><font color=\"#ef5350\">Vulnerability Impact: <\/font><\/b> With flawed or broken ABAC security control policy in place, The following are some of the consequences. <br> <br><ul> <li>Unauthorized access can result in data disclosure to unauthorized parties, data loss, or data manipulation.<\/li> <li>Unauthorized access to objects can also lead to full account takeover.<\/li> <\/ul> <b><font color=\"#ef5350\">Exploitation: <\/font><\/b> Attackers can exploit API endpoints that are vulnerable to broken object level authorization by manipulating the ID of an object that is sent within the request. This may lead to unauthorized access to sensitive data. This issue is  extremely common in API-based applications because the server component usually does not fully track the client\u2019s state, and instead, relies more on parameters like object IDs, that are sent from the client to decide which objects to access. <br> <br> <b><font color=\"#ef5350\">Remediation: <\/font><\/b> The following techniques may be checked for ensuring RBAC is in place <b><font color=\"#ef5350\"><sup>( 2 ) ( 3 ) ( 4 )<\/sup><\/font><\/b>. <br> <br><ul> <li>Implement a proper authorization mechanism that relies on the user policies and hierarchy.<\/li> <li>Prefer not to use an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.<\/li> <li>Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an client input to access a record in the database.<\/li> <li>Prefer to use random and unpredictable values as GUIDs for records\u2019 IDs.<\/li> <li>Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break the tests.<\/li> <\/ul> <b><font color=\"#ef5350\">References: <\/font><\/b><br> <ol> <li>Enforce Access Controls - https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html<\/li> <li>OWASP 2019 API Top 10 - https://github.com/OWASP/API-Security/raw/master/2019/en/dist/owasp-api-security-top-10.pdf<\/li> <li>OWASP Access Control Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html<\/li> <li>OWASP REST Security Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"6.8","problem.severity":"error","tags":["FX Top 10 - API Vulnerability","Data_Access_Control"]}},{"help":{"text":"<ul> <li>Use of Prepared Statements \t\t\t<\/li> <li>Use of Stored Procedures\t\t\t<\/li> <li>White list input validation\t\t\t<\/li> <li>Escaping all user supplied input \t<\/li> <li>Enforcing Least Privilege \t\t\t<\/li> <\/ul>"},"id":"NoSQL_Injection","fullDescription":{"text":"<strong class=\"text-danger\">Name: <\/strong> NoSQL Injection <strong class=\"text-danger\"><sup>( 1 )<\/sup><\/strong><br> <br> <strong class=\"text-danger\">Overview:<\/strong> SQL Injection is an Attack. It is executed by insertion or \u201cInjection\u201d of either partial or complete SQL query via query parameters, request body parameters, path parameters and passed to the application server/database.<br> <br>NoSQL databases are vulnerable to similar attacks like that of SQL. API endpoints allow much bigger surface area then exposed by the web/mobile forms, resulting in performing much deeper and comprehensive attacks by injecting across all resource properties, query-params, path-params, & headers.<br> <br>Injection flaws, such as SQL, NoSQL, Command Injection, etc. occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's malicious data can trick the interpreter into executing unintended commands or accessing data without proper authorization. <br> <br> <strong class=\"text-danger\">Severity:<\/strong> SQL Injection is classified under the category of \u201cInjection Attacks\u201d by OWASP. \u201cInjection Attacks\u201d is consistently rated at Top 1 Category of Attack by OWASP in years 2010, 2013 and 2017 <strong class=\"text-danger\"><sup>( 2 )<\/sup><\/strong>. SQL Injection is rated top 1 in the CWE / SANS Top 25 <strong class=\"text-danger\"><sup>( 3 ) ( 4 )<\/sup><\/strong>. <br> <br> <strong class=\"text-danger\">Vulnerability Impact:<\/strong> A Successful SQL Injection attack <br> <br><ul> <li>Can read sensitive data from the database<\/li> <li>Can modify the database data thru Insert / Update / Delete statements<\/li> <li>Can execute administrative operations on the database<\/li> <li>Can recover the content of the given file existing on the database<\/li> <li>Can write files into the file system<\/li> <li>Can issue commands to the operating System<\/li> <\/ul> <strong class=\"text-danger\">Exploitation:<\/strong> A successful SQL Injection attack is possible when the attacker crafts a syntactically Correct SQL Query. If an error is thrown back by the API by incorrect query, it will become much easier for the attacker to reconstruct the logic of the original query. If error is hidden, the attacker may have to reverse engineer for an exploitation. It might happen because of the following<br> <br><ul> <li>User supplied data is NOT validated, filtered or sanitized by the application<\/li> <li>Dynamic queries or non-parameterized calls without context-aware escaping<\/li> <\/ul> <strong class=\"text-danger\"> Remediation: <\/strong> A successful SQL Injection attack may possibly be avoided by Secure Coding Practices as outlined by OWASP SQL injection Prevention Cheat Sheet <strong class=\"text-danger\"><sup>( 5 )<\/sup><\/strong>. The following are some of the techniques for remediating SQL Injection attacks. <br> <br><ul> <li>Use of Prepared Statements \t\t\t<\/li> <li>Use of Stored Procedures\t\t\t<\/li> <li>White list input validation\t\t\t<\/li> <li>Escaping all user supplied input \t<\/li> <li>Enforcing Least Privilege \t\t\t<\/li> <\/ul> <strong class=\"text-danger\"> References:<\/strong><br> <ol> <li>SQL Injection: https://www.owasp.org/index.php/SQL_Injection<\/li> <li>OWASP Top 10 \u2013 2017 \u2013 A1 Injection - https://www.owasp.org/index.php/Top_10-2017_A1-Injection<\/li> <li>CWE \u2013 SANS \u2013 TOP 25 - http://cwe.mitre.org/top25/<\/li> <li>Common Weakness Enumeration \u2013 SQL Injection - http://cwe.mitre.org/data/definitions/89.html<\/li> <li>OWASP SQL Injection Prevention Cheat Sheet - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html<\/li> <\/ol> <br>"},"properties":{"security-severity":"9.6","problem.severity":"error","tags":["OWASP A1","[PCI DSS 3.0] 6.5.1","OWASP - OTG-INPVAL-005","FX Top 10 - API Vulnerability","Injection"]}},{"help":{"text":"<ul>\n<li>Time-based lockout and unlock.<\/li>\n<li>Self-service unlock (sends unlock email to registered email address).<\/li>\n<li>Manual administrator unlock.<\/li>\n<li>Manual administrator unlock with positive user identification.<\/li>\n<\/ul>"},"id":"Disable_User_After_5_Failed_Login_Attempts","fullDescription":{"text":"<strong class=\"text-danger\"> Name: <\/strong>Disable User After 5 Failed Login Attempts<strong class=\"text-danger\"><sup> ( 1 ) ( 2 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Overview: <\/strong>Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number, typically 5, of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout.<strong class=\"text-danger\"><sup> ( 2 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Severity: <\/strong>Disabling user after certain failed login attempts is mandated as part of compliance requirements especially PCI DSS. <strong class=\"text-danger\"><sup> ( 3 )<\/sup><\/strong><br>\n<br>\n<strong class=\"text-danger\">Vulnerability Impact:  <\/strong>Without a strong lockout mechanism, the application may be susceptible to brute force attacks. After a successful brute force attack, a malicious user could have access to confidential information or data, administration panels and opportunities for further attacks. <br>\n<br>\n<strong class=\"text-danger\">Remediation:  <\/strong>Apply account unlock mechanisms depending on the risk level. In order from lowest to highest assurance: <strong class=\"text-danger\"><sup> ( 1 )<\/sup><\/strong> <br>\n<ul>\n<li>Time-based lockout and unlock.<\/li>\n<li>Self-service unlock (sends unlock email to registered email address).<\/li>\n<li>Manual administrator unlock.<\/li>\n<li>Manual administrator unlock with positive user identification.<\/li>\n<\/ul>\n<strong class=\"text-danger\">References: <\/strong><br>\n<ol>\n<li>https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism<\/li>\n<li>https://cwe.mitre.org/data/definitions/645.html<\/li>\n<li>https://www.pcisecuritystandards.org/documents/Prioritized-Approach-for-PCI_DSS-v3_2.pdf<\/li>\n<\/ol>\n<br>"},"properties":{"security-severity":"6.4","problem.severity":"error","tags":[]}}],"informationUri":"https://www.apisec.ai/product"}}}]}
